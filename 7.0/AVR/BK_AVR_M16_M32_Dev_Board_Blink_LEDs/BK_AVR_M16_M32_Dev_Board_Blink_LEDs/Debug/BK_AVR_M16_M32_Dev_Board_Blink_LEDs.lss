
BK_AVR_M16_M32_Dev_Board_Blink_LEDs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000015a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000646  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005aa  00000000  00000000  0000082e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a8  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038b  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  0000142f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001477  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <util/delay.h> //Convenience functions for busy-wait delay loops

int x = 0;

int main(void) {
  DDRB = DDRB | 0b11111111; // All PORTB pins to be outputs = 0xFF
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	87 bb       	out	0x17, r24	; 23
  PORTB = 0b11111111; // All PORTB pins set to logic 1 (turn off LEDs) = 0xFF
  82:	88 bb       	out	0x18, r24	; 24

  DDRA = DDRA | 0b11011100; // PORTA set PA2, PA3, PA4, PA6 & PA7 as outputs = 0xDC
  84:	8a b3       	in	r24, 0x1a	; 26
  86:	8c 6d       	ori	r24, 0xDC	; 220
  88:	8a bb       	out	0x1a, r24	; 26
  PORTA = 0b01100000;    // PORTA set PA5 & PA6 to logic 1 = 0x60
  8a:	80 e6       	ldi	r24, 0x60	; 96
  8c:	8b bb       	out	0x1b, r24	; 27

  while (1) // infinite loop
  {
    _NOP();
  8e:	00 00       	nop
    x++; // Increment variable x
  90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  94:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  9e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    _NOP();
  a2:	00 00       	nop
    PORTA = PORTA | 0x04; // Set 8 LEDS latch U4 to transparent mode to reflect
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	8b bb       	out	0x1b, r24	; 27
                          // state of PORTB
    _NOP();
  aa:	00 00       	nop

    PORTB = PINB | 0b00000001; // Set PB0 to 1 to turn off LED D1
  ac:	86 b3       	in	r24, 0x16	; 22
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	88 bb       	out	0x18, r24	; 24
    _NOP();
  b2:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	84 e3       	ldi	r24, 0x34	; 52
  b8:	9c e0       	ldi	r25, 0x0C	; 12
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x3e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x48>
  c4:	00 00       	nop
    _delay_ms(500);

    PORTB = PINB & 0b11111110; // Sets PB0 to logic 0 to turn on LED D1
  c6:	86 b3       	in	r24, 0x16	; 22
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	88 bb       	out	0x18, r24	; 24
    _NOP();
  cc:	00 00       	nop
  ce:	2f e7       	ldi	r18, 0x7F	; 127
  d0:	88 e3       	ldi	r24, 0x38	; 56
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x58>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x62>
  de:	00 00       	nop
  e0:	d6 cf       	rjmp	.-84     	; 0x8e <main+0x12>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
