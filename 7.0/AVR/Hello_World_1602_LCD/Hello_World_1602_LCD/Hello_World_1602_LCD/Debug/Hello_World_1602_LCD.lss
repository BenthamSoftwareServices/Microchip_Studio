
Hello_World_1602_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800100  00001cd0  00001d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003dc  0080028c  0080028c  00001ef0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d0ca  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025ae  00000000  00000000  0000f62a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000302f  00000000  00000000  00011bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001190  00000000  00000000  00014c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000035c0  00000000  00000000  00015d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000564f  00000000  00000000  00019358  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005e0  00000000  00000000  0001e9a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      40:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_16>
      44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      48:	0c 94 19 02 	jmp	0x432	; 0x432 <__vector_18>
      4c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_19>
      50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      60:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__vector_24>
      64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <__ctors_start>:
      ae:	cd 00       	.word	0x00cd	; ????
      b0:	7b 02       	muls	r23, r27
      b2:	13 0b       	sbc	r17, r19

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	12 e0       	ldi	r17, 0x02	; 2
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e0 ed       	ldi	r30, 0xD0	; 208
      c8:	fc e1       	ldi	r31, 0x1C	; 28
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 38       	cpi	r26, 0x8C	; 140
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	26 e0       	ldi	r18, 0x06	; 6
      d8:	ac e8       	ldi	r26, 0x8C	; 140
      da:	b2 e0       	ldi	r27, 0x02	; 2
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a8 36       	cpi	r26, 0x68	; 104
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>

000000e6 <__do_global_ctors>:
      e6:	10 e0       	ldi	r17, 0x00	; 0
      e8:	ca e5       	ldi	r28, 0x5A	; 90
      ea:	d0 e0       	ldi	r29, 0x00	; 0
      ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_global_ctors+0x10>
      ee:	21 97       	sbiw	r28, 0x01	; 1
      f0:	fe 01       	movw	r30, r28
      f2:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__tablejump2__>
      f6:	c7 35       	cpi	r28, 0x57	; 87
      f8:	d1 07       	cpc	r29, r17
      fa:	c9 f7       	brne	.-14     	; 0xee <__do_global_ctors+0x8>
      fc:	0e 94 a9 02 	call	0x552	; 0x552 <main>
     100:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <_exit>

00000104 <__bad_interrupt>:
     104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     108:	26 e0       	ldi	r18, 0x06	; 6
     10a:	40 e8       	ldi	r20, 0x80	; 128
     10c:	55 e2       	ldi	r21, 0x25	; 37
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	88 ef       	ldi	r24, 0xF8	; 248
     114:	94 e0       	ldi	r25, 0x04	; 4
     116:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN14HardwareSerial5beginEmh>

LiquidCrystal_I2C_Hangul lcd(0x27,16,2); //I2C address in hex, followed by number of columns and rows

void setup() {
  Serial.begin(9600);
  lcd.init();
     11a:	8c e8       	ldi	r24, 0x8C	; 140
     11c:	92 e0       	ldi	r25, 0x02	; 2
     11e:	0e 94 11 0a 	call	0x1422	; 0x1422 <_ZN24LiquidCrystal_I2C_Hangul4initEv>
  lcd.backlight();
     122:	8c e8       	ldi	r24, 0x8C	; 140
     124:	92 e0       	ldi	r25, 0x02	; 2
     126:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN24LiquidCrystal_I2C_Hangul9backlightEv>
  lcd.clear();
     12a:	8c e8       	ldi	r24, 0x8C	; 140
     12c:	92 e0       	ldi	r25, 0x02	; 2
     12e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN24LiquidCrystal_I2C_Hangul5clearEv>
  delay(1000);
     132:	68 ee       	ldi	r22, 0xE8	; 232
     134:	73 e0       	ldi	r23, 0x03	; 3
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <delay>
  lcd.print("Hello Steve!");
     13e:	69 e1       	ldi	r22, 0x19	; 25
     140:	72 e0       	ldi	r23, 0x02	; 2
     142:	8c e8       	ldi	r24, 0x8C	; 140
     144:	92 e0       	ldi	r25, 0x02	; 2
     146:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN5Print5printEPKc>
  Serial.println ("Setup complete");
     14a:	66 e2       	ldi	r22, 0x26	; 38
     14c:	72 e0       	ldi	r23, 0x02	; 2
     14e:	88 ef       	ldi	r24, 0xF8	; 248
     150:	94 e0       	ldi	r25, 0x04	; 4
     152:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <_ZN5Print7printlnEPKc>

00000156 <loop>:
}

void loop() {
	delay(1000);
     156:	68 ee       	ldi	r22, 0xE8	; 232
     158:	73 e0       	ldi	r23, 0x03	; 3
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <delay>
	lcd.setCursor(0,1); //Column starting at 0, Row 0 for top and 1 for bottom
     162:	41 e0       	ldi	r20, 0x01	; 1
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	8c e8       	ldi	r24, 0x8C	; 140
     168:	92 e0       	ldi	r25, 0x02	; 2
     16a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN24LiquidCrystal_I2C_Hangul9setCursorEhh>
	lcd.print("Bottom row");
     16e:	65 e3       	ldi	r22, 0x35	; 53
     170:	72 e0       	ldi	r23, 0x02	; 2
     172:	8c e8       	ldi	r24, 0x8C	; 140
     174:	92 e0       	ldi	r25, 0x02	; 2
     176:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN5Print5printEPKc>
	delay(1000);
     17a:	68 ee       	ldi	r22, 0xE8	; 232
     17c:	73 e0       	ldi	r23, 0x03	; 3
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 7e 03 	call	0x6fc	; 0x6fc <delay>
	lcd.clear();
     186:	8c e8       	ldi	r24, 0x8C	; 140
     188:	92 e0       	ldi	r25, 0x02	; 2
     18a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN24LiquidCrystal_I2C_Hangul5clearEv>
	Serial.println("Loop running");
     18e:	60 e4       	ldi	r22, 0x40	; 64
     190:	72 e0       	ldi	r23, 0x02	; 2
     192:	88 ef       	ldi	r24, 0xF8	; 248
     194:	94 e0       	ldi	r25, 0x04	; 4
     196:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <_ZN5Print7printlnEPKc>

0000019a <_GLOBAL__sub_I_lcd>:
ï»¿//using the "" first checks your local directory, and if it doesn't find a match then moves on to check the system paths. Using <> starts the search with system headers.
#include "Arduino.h"
#include <LiquidCrystal_I2C_Hangul.h>
#include <Wire.h>

LiquidCrystal_I2C_Hangul lcd(0x27,16,2); //I2C address in hex, followed by number of columns and rows
     19a:	22 e0       	ldi	r18, 0x02	; 2
     19c:	40 e1       	ldi	r20, 0x10	; 16
     19e:	67 e2       	ldi	r22, 0x27	; 39
     1a0:	8c e8       	ldi	r24, 0x8C	; 140
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	0c 94 00 04 	jmp	0x800	; 0x800 <_ZN24LiquidCrystal_I2C_HangulC1Ehhh>

000001a8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     1a8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     1aa:	91 8d       	ldd	r25, Z+25	; 0x19
     1ac:	22 8d       	ldd	r18, Z+26	; 0x1a
     1ae:	89 2f       	mov	r24, r25
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	80 5c       	subi	r24, 0xC0	; 192
     1b4:	9f 4f       	sbci	r25, 0xFF	; 255
     1b6:	82 1b       	sub	r24, r18
     1b8:	91 09       	sbc	r25, r1
}
     1ba:	8f 73       	andi	r24, 0x3F	; 63
     1bc:	99 27       	eor	r25, r25
     1be:	08 95       	ret

000001c0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     1c0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     1c2:	91 8d       	ldd	r25, Z+25	; 0x19
     1c4:	82 8d       	ldd	r24, Z+26	; 0x1a
     1c6:	98 17       	cp	r25, r24
     1c8:	31 f0       	breq	.+12     	; 0x1d6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     1ca:	82 8d       	ldd	r24, Z+26	; 0x1a
     1cc:	e8 0f       	add	r30, r24
     1ce:	f1 1d       	adc	r31, r1
     1d0:	85 8d       	ldd	r24, Z+29	; 0x1d
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     1da:	08 95       	ret

000001dc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     1dc:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     1de:	91 8d       	ldd	r25, Z+25	; 0x19
     1e0:	82 8d       	ldd	r24, Z+26	; 0x1a
     1e2:	98 17       	cp	r25, r24
     1e4:	61 f0       	breq	.+24     	; 0x1fe <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     1e6:	82 8d       	ldd	r24, Z+26	; 0x1a
     1e8:	df 01       	movw	r26, r30
     1ea:	a8 0f       	add	r26, r24
     1ec:	b1 1d       	adc	r27, r1
     1ee:	5d 96       	adiw	r26, 0x1d	; 29
     1f0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     1f2:	92 8d       	ldd	r25, Z+26	; 0x1a
     1f4:	9f 5f       	subi	r25, 0xFF	; 255
     1f6:	9f 73       	andi	r25, 0x3F	; 63
     1f8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     202:	08 95       	ret

00000204 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     204:	fc 01       	movw	r30, r24
     206:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     208:	44 8d       	ldd	r20, Z+28	; 0x1c
     20a:	25 2f       	mov	r18, r21
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	84 2f       	mov	r24, r20
     210:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     212:	82 1b       	sub	r24, r18
     214:	93 0b       	sbc	r25, r19
     216:	54 17       	cp	r21, r20
     218:	10 f0       	brcs	.+4      	; 0x21e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     21a:	cf 96       	adiw	r24, 0x3f	; 63
     21c:	08 95       	ret
  return tail - head - 1;
     21e:	01 97       	sbiw	r24, 0x01	; 1
}
     220:	08 95       	ret

00000222 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     222:	81 e7       	ldi	r24, 0x71	; 113
     224:	92 e0       	ldi	r25, 0x02	; 2
     226:	89 2b       	or	r24, r25
     228:	49 f0       	breq	.+18     	; 0x23c <_Z14serialEventRunv+0x1a>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	89 2b       	or	r24, r25
     230:	29 f0       	breq	.+10     	; 0x23c <_Z14serialEventRunv+0x1a>
     232:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z17Serial0_availablev>
     236:	81 11       	cpse	r24, r1
     238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     23c:	08 95       	ret

0000023e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     23e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     240:	84 8d       	ldd	r24, Z+28	; 0x1c
     242:	df 01       	movw	r26, r30
     244:	a8 0f       	add	r26, r24
     246:	b1 1d       	adc	r27, r1
     248:	a3 5a       	subi	r26, 0xA3	; 163
     24a:	bf 4f       	sbci	r27, 0xFF	; 255
     24c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     24e:	84 8d       	ldd	r24, Z+28	; 0x1c
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	8f 73       	andi	r24, 0x3F	; 63
     256:	99 27       	eor	r25, r25
     258:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     25a:	a6 89       	ldd	r26, Z+22	; 0x16
     25c:	b7 89       	ldd	r27, Z+23	; 0x17
     25e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     260:	a0 89       	ldd	r26, Z+16	; 0x10
     262:	b1 89       	ldd	r27, Z+17	; 0x11
     264:	8c 91       	ld	r24, X
     266:	83 70       	andi	r24, 0x03	; 3
     268:	80 64       	ori	r24, 0x40	; 64
     26a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     26c:	93 8d       	ldd	r25, Z+27	; 0x1b
     26e:	84 8d       	ldd	r24, Z+28	; 0x1c
     270:	98 13       	cpse	r25, r24
     272:	06 c0       	rjmp	.+12     	; 0x280 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     274:	02 88       	ldd	r0, Z+18	; 0x12
     276:	f3 89       	ldd	r31, Z+19	; 0x13
     278:	e0 2d       	mov	r30, r0
     27a:	80 81       	ld	r24, Z
     27c:	8f 7d       	andi	r24, 0xDF	; 223
     27e:	80 83       	st	Z, r24
     280:	08 95       	ret

00000282 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	ec 01       	movw	r28, r24
  _written = true;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     294:	9b 8d       	ldd	r25, Y+27	; 0x1b
     296:	8c 8d       	ldd	r24, Y+28	; 0x1c
     298:	98 13       	cpse	r25, r24
     29a:	05 c0       	rjmp	.+10     	; 0x2a6 <_ZN14HardwareSerial5writeEh+0x24>
     29c:	e8 89       	ldd	r30, Y+16	; 0x10
     29e:	f9 89       	ldd	r31, Y+17	; 0x11
     2a0:	80 81       	ld	r24, Z
     2a2:	85 fd       	sbrc	r24, 5
     2a4:	26 c0       	rjmp	.+76     	; 0x2f2 <_ZN14HardwareSerial5writeEh+0x70>
     2a6:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     2a8:	0b 8d       	ldd	r16, Y+27	; 0x1b
     2aa:	10 e0       	ldi	r17, 0x00	; 0
     2ac:	0f 5f       	subi	r16, 0xFF	; 255
     2ae:	1f 4f       	sbci	r17, 0xFF	; 255
     2b0:	0f 73       	andi	r16, 0x3F	; 63
     2b2:	11 27       	eor	r17, r17
     2b4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     2b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     2b8:	e8 12       	cpse	r14, r24
     2ba:	0c c0       	rjmp	.+24     	; 0x2d4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	07 fc       	sbrc	r0, 7
     2c0:	fa cf       	rjmp	.-12     	; 0x2b6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     2c2:	e8 89       	ldd	r30, Y+16	; 0x10
     2c4:	f9 89       	ldd	r31, Y+17	; 0x11
     2c6:	80 81       	ld	r24, Z
     2c8:	85 ff       	sbrs	r24, 5
     2ca:	f5 cf       	rjmp	.-22     	; 0x2b6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     2cc:	ce 01       	movw	r24, r28
     2ce:	0e 94 1f 01 	call	0x23e	; 0x23e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     2d2:	f1 cf       	rjmp	.-30     	; 0x2b6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     2d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2d6:	fe 01       	movw	r30, r28
     2d8:	e8 0f       	add	r30, r24
     2da:	f1 1d       	adc	r31, r1
     2dc:	e3 5a       	subi	r30, 0xA3	; 163
     2de:	ff 4f       	sbci	r31, 0xFF	; 255
     2e0:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2e2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2e4:	f8 94       	cli
    _tx_buffer_head = i;
     2e6:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     2e8:	ea 89       	ldd	r30, Y+18	; 0x12
     2ea:	fb 89       	ldd	r31, Y+19	; 0x13
     2ec:	80 81       	ld	r24, Z
     2ee:	80 62       	ori	r24, 0x20	; 32
     2f0:	0a c0       	rjmp	.+20     	; 0x306 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2f2:	9f b7       	in	r25, 0x3f	; 63
     2f4:	f8 94       	cli
      *_udr = c;
     2f6:	ee 89       	ldd	r30, Y+22	; 0x16
     2f8:	ff 89       	ldd	r31, Y+23	; 0x17
     2fa:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     2fc:	e8 89       	ldd	r30, Y+16	; 0x10
     2fe:	f9 89       	ldd	r31, Y+17	; 0x11
     300:	80 81       	ld	r24, Z
     302:	83 70       	andi	r24, 0x03	; 3
     304:	80 64       	ori	r24, 0x40	; 64
     306:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     308:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	08 95       	ret

0000031c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     322:	88 8d       	ldd	r24, Y+24	; 0x18
     324:	88 23       	and	r24, r24
     326:	c9 f0       	breq	.+50     	; 0x35a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     328:	ea 89       	ldd	r30, Y+18	; 0x12
     32a:	fb 89       	ldd	r31, Y+19	; 0x13
     32c:	80 81       	ld	r24, Z
     32e:	85 fd       	sbrc	r24, 5
     330:	05 c0       	rjmp	.+10     	; 0x33c <_ZN14HardwareSerial5flushEv+0x20>
     332:	a8 89       	ldd	r26, Y+16	; 0x10
     334:	b9 89       	ldd	r27, Y+17	; 0x11
     336:	8c 91       	ld	r24, X
     338:	86 fd       	sbrc	r24, 6
     33a:	0f c0       	rjmp	.+30     	; 0x35a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	07 fc       	sbrc	r0, 7
     340:	f5 cf       	rjmp	.-22     	; 0x32c <_ZN14HardwareSerial5flushEv+0x10>
     342:	80 81       	ld	r24, Z
     344:	85 ff       	sbrs	r24, 5
     346:	f2 cf       	rjmp	.-28     	; 0x32c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     348:	a8 89       	ldd	r26, Y+16	; 0x10
     34a:	b9 89       	ldd	r27, Y+17	; 0x11
     34c:	8c 91       	ld	r24, X
     34e:	85 ff       	sbrs	r24, 5
     350:	ed cf       	rjmp	.-38     	; 0x32c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     352:	ce 01       	movw	r24, r28
     354:	0e 94 1f 01 	call	0x23e	; 0x23e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     358:	e7 cf       	rjmp	.-50     	; 0x328 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     360:	cf 92       	push	r12
     362:	df 92       	push	r13
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	ec 01       	movw	r28, r24
     370:	6a 01       	movw	r12, r20
     372:	7b 01       	movw	r14, r22
     374:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     376:	e8 89       	ldd	r30, Y+16	; 0x10
     378:	f9 89       	ldd	r31, Y+17	; 0x11
     37a:	82 e0       	ldi	r24, 0x02	; 2
     37c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     37e:	41 15       	cp	r20, r1
     380:	51 4e       	sbci	r21, 0xE1	; 225
     382:	61 05       	cpc	r22, r1
     384:	71 05       	cpc	r23, r1
     386:	b1 f0       	breq	.+44     	; 0x3b4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	79 e0       	ldi	r23, 0x09	; 9
     38c:	8d e3       	ldi	r24, 0x3D	; 61
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	a7 01       	movw	r20, r14
     392:	96 01       	movw	r18, r12
     394:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__udivmodsi4>
     398:	da 01       	movw	r26, r20
     39a:	c9 01       	movw	r24, r18
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	a1 09       	sbc	r26, r1
     3a0:	b1 09       	sbc	r27, r1
     3a2:	b6 95       	lsr	r27
     3a4:	a7 95       	ror	r26
     3a6:	97 95       	ror	r25
     3a8:	87 95       	ror	r24
     3aa:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     3ac:	21 15       	cp	r18, r1
     3ae:	80 e1       	ldi	r24, 0x10	; 16
     3b0:	38 07       	cpc	r19, r24
     3b2:	a8 f0       	brcs	.+42     	; 0x3de <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     3b4:	e8 89       	ldd	r30, Y+16	; 0x10
     3b6:	f9 89       	ldd	r31, Y+17	; 0x11
     3b8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     3ba:	60 e8       	ldi	r22, 0x80	; 128
     3bc:	74 e8       	ldi	r23, 0x84	; 132
     3be:	8e e1       	ldi	r24, 0x1E	; 30
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	a7 01       	movw	r20, r14
     3c4:	96 01       	movw	r18, r12
     3c6:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__udivmodsi4>
     3ca:	da 01       	movw	r26, r20
     3cc:	c9 01       	movw	r24, r18
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	a1 09       	sbc	r26, r1
     3d2:	b1 09       	sbc	r27, r1
     3d4:	b6 95       	lsr	r27
     3d6:	a7 95       	ror	r26
     3d8:	97 95       	ror	r25
     3da:	87 95       	ror	r24
     3dc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     3de:	ec 85       	ldd	r30, Y+12	; 0x0c
     3e0:	fd 85       	ldd	r31, Y+13	; 0x0d
     3e2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     3e4:	ee 85       	ldd	r30, Y+14	; 0x0e
     3e6:	ff 85       	ldd	r31, Y+15	; 0x0f
     3e8:	20 83       	st	Z, r18

  _written = false;
     3ea:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     3ec:	ec 89       	ldd	r30, Y+20	; 0x14
     3ee:	fd 89       	ldd	r31, Y+21	; 0x15
     3f0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     3f2:	ea 89       	ldd	r30, Y+18	; 0x12
     3f4:	fb 89       	ldd	r31, Y+19	; 0x13
     3f6:	80 81       	ld	r24, Z
     3f8:	80 61       	ori	r24, 0x10	; 16
     3fa:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     3fc:	ea 89       	ldd	r30, Y+18	; 0x12
     3fe:	fb 89       	ldd	r31, Y+19	; 0x13
     400:	80 81       	ld	r24, Z
     402:	88 60       	ori	r24, 0x08	; 8
     404:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     406:	ea 89       	ldd	r30, Y+18	; 0x12
     408:	fb 89       	ldd	r31, Y+19	; 0x13
     40a:	80 81       	ld	r24, Z
     40c:	80 68       	ori	r24, 0x80	; 128
     40e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     410:	ea 89       	ldd	r30, Y+18	; 0x12
     412:	fb 89       	ldd	r31, Y+19	; 0x13
     414:	80 81       	ld	r24, Z
     416:	8f 7d       	andi	r24, 0xDF	; 223
     418:	80 83       	st	Z, r24
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	08 95       	ret

0000042a <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	08 95       	ret

00000430 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     430:	08 95       	ret

00000432 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     432:	1f 92       	push	r1
     434:	0f 92       	push	r0
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	0f 92       	push	r0
     43a:	11 24       	eor	r1, r1
     43c:	2f 93       	push	r18
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     446:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <Serial+0x10>
     44a:	f0 91 09 05 	lds	r31, 0x0509	; 0x800509 <Serial+0x11>
     44e:	80 81       	ld	r24, Z
     450:	e0 91 0e 05 	lds	r30, 0x050E	; 0x80050e <Serial+0x16>
     454:	f0 91 0f 05 	lds	r31, 0x050F	; 0x80050f <Serial+0x17>
     458:	82 fd       	sbrc	r24, 2
     45a:	12 c0       	rjmp	.+36     	; 0x480 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     45c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     45e:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <Serial+0x19>
     462:	8f 5f       	subi	r24, 0xFF	; 255
     464:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     466:	20 91 12 05 	lds	r18, 0x0512	; 0x800512 <Serial+0x1a>
     46a:	82 17       	cp	r24, r18
     46c:	51 f0       	breq	.+20     	; 0x482 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     46e:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <Serial+0x19>
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	e8 50       	subi	r30, 0x08	; 8
     476:	fb 4f       	sbci	r31, 0xFB	; 251
     478:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     47a:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <Serial+0x19>
     47e:	01 c0       	rjmp	.+2      	; 0x482 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     480:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     482:	ff 91       	pop	r31
     484:	ef 91       	pop	r30
     486:	9f 91       	pop	r25
     488:	8f 91       	pop	r24
     48a:	2f 91       	pop	r18
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	2f 93       	push	r18
     4a2:	3f 93       	push	r19
     4a4:	4f 93       	push	r20
     4a6:	5f 93       	push	r21
     4a8:	6f 93       	push	r22
     4aa:	7f 93       	push	r23
     4ac:	8f 93       	push	r24
     4ae:	9f 93       	push	r25
     4b0:	af 93       	push	r26
     4b2:	bf 93       	push	r27
     4b4:	ef 93       	push	r30
     4b6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     4b8:	88 ef       	ldi	r24, 0xF8	; 248
     4ba:	94 e0       	ldi	r25, 0x04	; 4
     4bc:	0e 94 1f 01 	call	0x23e	; 0x23e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     4c0:	ff 91       	pop	r31
     4c2:	ef 91       	pop	r30
     4c4:	bf 91       	pop	r27
     4c6:	af 91       	pop	r26
     4c8:	9f 91       	pop	r25
     4ca:	8f 91       	pop	r24
     4cc:	7f 91       	pop	r23
     4ce:	6f 91       	pop	r22
     4d0:	5f 91       	pop	r21
     4d2:	4f 91       	pop	r20
     4d4:	3f 91       	pop	r19
     4d6:	2f 91       	pop	r18
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti

000004e2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     4e2:	88 ef       	ldi	r24, 0xF8	; 248
     4e4:	94 e0       	ldi	r25, 0x04	; 4
     4e6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN14HardwareSerial9availableEv>
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	89 2b       	or	r24, r25
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <_Z17Serial0_availablev+0x10>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
}
     4f2:	82 2f       	mov	r24, r18
     4f4:	08 95       	ret

000004f6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     4f6:	e8 ef       	ldi	r30, 0xF8	; 248
     4f8:	f4 e0       	ldi	r31, 0x04	; 4
     4fa:	13 82       	std	Z+3, r1	; 0x03
     4fc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     4fe:	88 ee       	ldi	r24, 0xE8	; 232
     500:	93 e0       	ldi	r25, 0x03	; 3
     502:	a0 e0       	ldi	r26, 0x00	; 0
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	84 83       	std	Z+4, r24	; 0x04
     508:	95 83       	std	Z+5, r25	; 0x05
     50a:	a6 83       	std	Z+6, r26	; 0x06
     50c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     50e:	81 e5       	ldi	r24, 0x51	; 81
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	80 83       	st	Z, r24
     516:	85 ec       	ldi	r24, 0xC5	; 197
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	95 87       	std	Z+13, r25	; 0x0d
     51c:	84 87       	std	Z+12, r24	; 0x0c
     51e:	84 ec       	ldi	r24, 0xC4	; 196
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	97 87       	std	Z+15, r25	; 0x0f
     524:	86 87       	std	Z+14, r24	; 0x0e
     526:	80 ec       	ldi	r24, 0xC0	; 192
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	91 8b       	std	Z+17, r25	; 0x11
     52c:	80 8b       	std	Z+16, r24	; 0x10
     52e:	81 ec       	ldi	r24, 0xC1	; 193
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	93 8b       	std	Z+19, r25	; 0x13
     534:	82 8b       	std	Z+18, r24	; 0x12
     536:	82 ec       	ldi	r24, 0xC2	; 194
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	95 8b       	std	Z+21, r25	; 0x15
     53c:	84 8b       	std	Z+20, r24	; 0x14
     53e:	86 ec       	ldi	r24, 0xC6	; 198
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	97 8b       	std	Z+23, r25	; 0x17
     544:	86 8b       	std	Z+22, r24	; 0x16
     546:	11 8e       	std	Z+25, r1	; 0x19
     548:	12 8e       	std	Z+26, r1	; 0x1a
     54a:	13 8e       	std	Z+27, r1	; 0x1b
     54c:	14 8e       	std	Z+28, r1	; 0x1c
     54e:	08 95       	ret

00000550 <initVariant>:
     550:	08 95       	ret

00000552 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     552:	0e 94 c5 03 	call	0x78a	; 0x78a <init>

	initVariant();
     556:	0e 94 a8 02 	call	0x550	; 0x550 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     55a:	0e 94 84 00 	call	0x108	; 0x108 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     55e:	c1 e1       	ldi	r28, 0x11	; 17
     560:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     562:	0e 94 ab 00 	call	0x156	; 0x156 <loop>
		if (serialEventRun) serialEventRun();
     566:	20 97       	sbiw	r28, 0x00	; 0
     568:	e1 f3       	breq	.-8      	; 0x562 <main+0x10>
     56a:	0e 94 11 01 	call	0x222	; 0x222 <_Z14serialEventRunv>
     56e:	f9 cf       	rjmp	.-14     	; 0x562 <main+0x10>

00000570 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	6c 01       	movw	r12, r24
     582:	7a 01       	movw	r14, r20
     584:	8b 01       	movw	r16, r22
     586:	c0 e0       	ldi	r28, 0x00	; 0
     588:	d0 e0       	ldi	r29, 0x00	; 0
     58a:	ce 15       	cp	r28, r14
     58c:	df 05       	cpc	r29, r15
     58e:	81 f0       	breq	.+32     	; 0x5b0 <_ZN5Print5writeEPKhj+0x40>
     590:	d8 01       	movw	r26, r16
     592:	6d 91       	ld	r22, X+
     594:	8d 01       	movw	r16, r26
     596:	d6 01       	movw	r26, r12
     598:	ed 91       	ld	r30, X+
     59a:	fc 91       	ld	r31, X
     59c:	01 90       	ld	r0, Z+
     59e:	f0 81       	ld	r31, Z
     5a0:	e0 2d       	mov	r30, r0
     5a2:	c6 01       	movw	r24, r12
     5a4:	09 95       	icall
     5a6:	89 2b       	or	r24, r25
     5a8:	11 f0       	breq	.+4      	; 0x5ae <_ZN5Print5writeEPKhj+0x3e>
     5aa:	21 96       	adiw	r28, 0x01	; 1
     5ac:	ee cf       	rjmp	.-36     	; 0x58a <_ZN5Print5writeEPKhj+0x1a>
     5ae:	7e 01       	movw	r14, r28
     5b0:	c7 01       	movw	r24, r14
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	df 90       	pop	r13
     5c0:	cf 90       	pop	r12
     5c2:	08 95       	ret

000005c4 <_ZN5Print5writeEPKc>:
     5c4:	61 15       	cp	r22, r1
     5c6:	71 05       	cpc	r23, r1
     5c8:	79 f0       	breq	.+30     	; 0x5e8 <_ZN5Print5writeEPKc+0x24>
     5ca:	fb 01       	movw	r30, r22
     5cc:	01 90       	ld	r0, Z+
     5ce:	00 20       	and	r0, r0
     5d0:	e9 f7       	brne	.-6      	; 0x5cc <_ZN5Print5writeEPKc+0x8>
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	af 01       	movw	r20, r30
     5d6:	46 1b       	sub	r20, r22
     5d8:	57 0b       	sbc	r21, r23
     5da:	dc 01       	movw	r26, r24
     5dc:	ed 91       	ld	r30, X+
     5de:	fc 91       	ld	r31, X
     5e0:	02 80       	ldd	r0, Z+2	; 0x02
     5e2:	f3 81       	ldd	r31, Z+3	; 0x03
     5e4:	e0 2d       	mov	r30, r0
     5e6:	09 94       	ijmp
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	08 95       	ret

000005ee <_ZN5Print5printEPKc>:
     5ee:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <_ZN5Print5writeEPKc>

000005f2 <_ZN5Print7printlnEv>:
     5f2:	6f e5       	ldi	r22, 0x5F	; 95
     5f4:	72 e0       	ldi	r23, 0x02	; 2
     5f6:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <_ZN5Print5writeEPKc>

000005fa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     604:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN5Print5writeEPKc>
     608:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     60a:	ce 01       	movw	r24, r28
     60c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN5Print7printlnEv>
  return n;
}
     610:	80 0f       	add	r24, r16
     612:	91 1f       	adc	r25, r17
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	08 95       	ret

0000061e <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     61e:	1f 92       	push	r1
     620:	0f 92       	push	r0
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	0f 92       	push	r0
     626:	11 24       	eor	r1, r1
     628:	2f 93       	push	r18
     62a:	3f 93       	push	r19
     62c:	8f 93       	push	r24
     62e:	9f 93       	push	r25
     630:	af 93       	push	r26
     632:	bf 93       	push	r27
     634:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <timer0_millis>
     638:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <timer0_millis+0x1>
     63c:	a0 91 98 05 	lds	r26, 0x0598	; 0x800598 <timer0_millis+0x2>
     640:	b0 91 99 05 	lds	r27, 0x0599	; 0x800599 <timer0_millis+0x3>
     644:	30 91 95 05 	lds	r19, 0x0595	; 0x800595 <timer0_fract>
     648:	23 e0       	ldi	r18, 0x03	; 3
     64a:	23 0f       	add	r18, r19
     64c:	2d 37       	cpi	r18, 0x7D	; 125
     64e:	20 f4       	brcc	.+8      	; 0x658 <__vector_16+0x3a>
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	a1 1d       	adc	r26, r1
     654:	b1 1d       	adc	r27, r1
     656:	05 c0       	rjmp	.+10     	; 0x662 <__vector_16+0x44>
     658:	26 e8       	ldi	r18, 0x86	; 134
     65a:	23 0f       	add	r18, r19
     65c:	02 96       	adiw	r24, 0x02	; 2
     65e:	a1 1d       	adc	r26, r1
     660:	b1 1d       	adc	r27, r1
     662:	20 93 95 05 	sts	0x0595, r18	; 0x800595 <timer0_fract>
     666:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <timer0_millis>
     66a:	90 93 97 05 	sts	0x0597, r25	; 0x800597 <timer0_millis+0x1>
     66e:	a0 93 98 05 	sts	0x0598, r26	; 0x800598 <timer0_millis+0x2>
     672:	b0 93 99 05 	sts	0x0599, r27	; 0x800599 <timer0_millis+0x3>
     676:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <timer0_overflow_count>
     67a:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <timer0_overflow_count+0x1>
     67e:	a0 91 9c 05 	lds	r26, 0x059C	; 0x80059c <timer0_overflow_count+0x2>
     682:	b0 91 9d 05 	lds	r27, 0x059D	; 0x80059d <timer0_overflow_count+0x3>
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	a1 1d       	adc	r26, r1
     68a:	b1 1d       	adc	r27, r1
     68c:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <timer0_overflow_count>
     690:	90 93 9b 05 	sts	0x059B, r25	; 0x80059b <timer0_overflow_count+0x1>
     694:	a0 93 9c 05 	sts	0x059C, r26	; 0x80059c <timer0_overflow_count+0x2>
     698:	b0 93 9d 05 	sts	0x059D, r27	; 0x80059d <timer0_overflow_count+0x3>
     69c:	bf 91       	pop	r27
     69e:	af 91       	pop	r26
     6a0:	9f 91       	pop	r25
     6a2:	8f 91       	pop	r24
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     6b2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     6b4:	f8 94       	cli
	m = timer0_overflow_count;
     6b6:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <timer0_overflow_count>
     6ba:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <timer0_overflow_count+0x1>
     6be:	a0 91 9c 05 	lds	r26, 0x059C	; 0x80059c <timer0_overflow_count+0x2>
     6c2:	b0 91 9d 05 	lds	r27, 0x059D	; 0x80059d <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     6c6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     6c8:	a8 9b       	sbis	0x15, 0	; 21
     6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <micros+0x24>
     6cc:	2f 3f       	cpi	r18, 0xFF	; 255
     6ce:	19 f0       	breq	.+6      	; 0x6d6 <micros+0x24>
		m++;
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	a1 1d       	adc	r26, r1
     6d4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     6d6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     6d8:	ba 2f       	mov	r27, r26
     6da:	a9 2f       	mov	r26, r25
     6dc:	98 2f       	mov	r25, r24
     6de:	88 27       	eor	r24, r24
     6e0:	82 0f       	add	r24, r18
     6e2:	91 1d       	adc	r25, r1
     6e4:	a1 1d       	adc	r26, r1
     6e6:	b1 1d       	adc	r27, r1
     6e8:	bc 01       	movw	r22, r24
     6ea:	cd 01       	movw	r24, r26
     6ec:	42 e0       	ldi	r20, 0x02	; 2
     6ee:	66 0f       	add	r22, r22
     6f0:	77 1f       	adc	r23, r23
     6f2:	88 1f       	adc	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	4a 95       	dec	r20
     6f8:	d1 f7       	brne	.-12     	; 0x6ee <micros+0x3c>
}
     6fa:	08 95       	ret

000006fc <delay>:

void delay(unsigned long ms)
{
     6fc:	8f 92       	push	r8
     6fe:	9f 92       	push	r9
     700:	af 92       	push	r10
     702:	bf 92       	push	r11
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	6b 01       	movw	r12, r22
     70e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     710:	0e 94 59 03 	call	0x6b2	; 0x6b2 <micros>
     714:	4b 01       	movw	r8, r22
     716:	5c 01       	movw	r10, r24

	while (ms > 0) {
     718:	c1 14       	cp	r12, r1
     71a:	d1 04       	cpc	r13, r1
     71c:	e1 04       	cpc	r14, r1
     71e:	f1 04       	cpc	r15, r1
     720:	01 f1       	breq	.+64     	; 0x762 <delay+0x66>
		yield();
     722:	0e 94 17 0b 	call	0x162e	; 0x162e <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     726:	0e 94 59 03 	call	0x6b2	; 0x6b2 <micros>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	88 19       	sub	r24, r8
     730:	99 09       	sbc	r25, r9
     732:	aa 09       	sbc	r26, r10
     734:	bb 09       	sbc	r27, r11
     736:	88 3e       	cpi	r24, 0xE8	; 232
     738:	93 40       	sbci	r25, 0x03	; 3
     73a:	a1 05       	cpc	r26, r1
     73c:	b1 05       	cpc	r27, r1
     73e:	60 f3       	brcs	.-40     	; 0x718 <delay+0x1c>
			ms--;
     740:	21 e0       	ldi	r18, 0x01	; 1
     742:	c2 1a       	sub	r12, r18
     744:	d1 08       	sbc	r13, r1
     746:	e1 08       	sbc	r14, r1
     748:	f1 08       	sbc	r15, r1
			start += 1000;
     74a:	88 ee       	ldi	r24, 0xE8	; 232
     74c:	88 0e       	add	r8, r24
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	98 1e       	adc	r9, r24
     752:	a1 1c       	adc	r10, r1
     754:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     756:	c1 14       	cp	r12, r1
     758:	d1 04       	cpc	r13, r1
     75a:	e1 04       	cpc	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	19 f7       	brne	.-58     	; 0x726 <delay+0x2a>
     760:	db cf       	rjmp	.-74     	; 0x718 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	df 90       	pop	r13
     768:	cf 90       	pop	r12
     76a:	bf 90       	pop	r11
     76c:	af 90       	pop	r10
     76e:	9f 90       	pop	r9
     770:	8f 90       	pop	r8
     772:	08 95       	ret

00000774 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	91 05       	cpc	r25, r1
     778:	38 f0       	brcs	.+14     	; 0x788 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     782:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <delayMicroseconds+0x10>
     788:	08 95       	ret

0000078a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     78a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     78c:	84 b5       	in	r24, 0x24	; 36
     78e:	82 60       	ori	r24, 0x02	; 2
     790:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     792:	84 b5       	in	r24, 0x24	; 36
     794:	81 60       	ori	r24, 0x01	; 1
     796:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     798:	85 b5       	in	r24, 0x25	; 37
     79a:	82 60       	ori	r24, 0x02	; 2
     79c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     79e:	85 b5       	in	r24, 0x25	; 37
     7a0:	81 60       	ori	r24, 0x01	; 1
     7a2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     7a4:	ee e6       	ldi	r30, 0x6E	; 110
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	81 60       	ori	r24, 0x01	; 1
     7ac:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     7ae:	e1 e8       	ldi	r30, 0x81	; 129
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     7b4:	80 81       	ld	r24, Z
     7b6:	82 60       	ori	r24, 0x02	; 2
     7b8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     7ba:	80 81       	ld	r24, Z
     7bc:	81 60       	ori	r24, 0x01	; 1
     7be:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     7c0:	e0 e8       	ldi	r30, 0x80	; 128
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	81 60       	ori	r24, 0x01	; 1
     7c8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     7ca:	e1 eb       	ldi	r30, 0xB1	; 177
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	84 60       	ori	r24, 0x04	; 4
     7d2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     7d4:	e0 eb       	ldi	r30, 0xB0	; 176
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	81 60       	ori	r24, 0x01	; 1
     7dc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     7de:	ea e7       	ldi	r30, 0x7A	; 122
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	84 60       	ori	r24, 0x04	; 4
     7e6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     7e8:	80 81       	ld	r24, Z
     7ea:	82 60       	ori	r24, 0x02	; 2
     7ec:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     7ee:	80 81       	ld	r24, Z
     7f0:	81 60       	ori	r24, 0x01	; 1
     7f2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     7f4:	80 81       	ld	r24, Z
     7f6:	80 68       	ori	r24, 0x80	; 128
     7f8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     7fa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     7fe:	08 95       	ret

00000800 <_ZN24LiquidCrystal_I2C_HangulC1Ehhh>:
    byte jong = univalue % 28;
    byte jung = ((univalue-jong)/28)%21;
    byte cho = ((univalue-jong)/28)/21;
    hanCursor+=printing(cho, jung, jong, hanCursor,i);
  }
}
     800:	2f 92       	push	r2
     802:	3f 92       	push	r3
     804:	4f 92       	push	r4
     806:	5f 92       	push	r5
     808:	6f 92       	push	r6
     80a:	7f 92       	push	r7
     80c:	8f 92       	push	r8
     80e:	9f 92       	push	r9
     810:	af 92       	push	r10
     812:	bf 92       	push	r11
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	af 97       	sbiw	r28, 0x2f	; 47
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	9f a7       	std	Y+47, r25	; 0x2f
     836:	8e a7       	std	Y+46, r24	; 0x2e
     838:	6b a7       	std	Y+43, r22	; 0x2b
     83a:	4c a7       	std	Y+44, r20	; 0x2c
     83c:	2d a7       	std	Y+45, r18	; 0x2d
     83e:	dc 01       	movw	r26, r24
     840:	13 96       	adiw	r26, 0x03	; 3
     842:	1c 92       	st	X, r1
     844:	1e 92       	st	-X, r1
     846:	12 97       	sbiw	r26, 0x02	; 2
     848:	82 e7       	ldi	r24, 0x72	; 114
     84a:	92 e0       	ldi	r25, 0x02	; 2
     84c:	11 96       	adiw	r26, 0x01	; 1
     84e:	9c 93       	st	X, r25
     850:	8e 93       	st	-X, r24
     852:	1d 96       	adiw	r26, 0x0d	; 13
     854:	1c 92       	st	X, r1
     856:	1e 92       	st	-X, r1
     858:	1c 97       	sbiw	r26, 0x0c	; 12
     85a:	84 ef       	ldi	r24, 0xF4	; 244
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	1f 96       	adiw	r26, 0x0f	; 15
     860:	9c 93       	st	X, r25
     862:	8e 93       	st	-X, r24
     864:	1e 97       	sbiw	r26, 0x0e	; 14
     866:	28 e0       	ldi	r18, 0x08	; 8
     868:	cd 01       	movw	r24, r26
     86a:	40 96       	adiw	r24, 0x10	; 16
     86c:	fc 01       	movw	r30, r24
     86e:	72 2e       	mov	r7, r18
     870:	11 92       	st	Z+, r1
     872:	7a 94       	dec	r7
     874:	e9 f7       	brne	.-6      	; 0x870 <_ZN24LiquidCrystal_I2C_HangulC1Ehhh+0x70>
     876:	38 e0       	ldi	r19, 0x08	; 8
     878:	e0 e0       	ldi	r30, 0x00	; 0
     87a:	f1 e0       	ldi	r31, 0x01	; 1
     87c:	ae a5       	ldd	r26, Y+46	; 0x2e
     87e:	bf a5       	ldd	r27, Y+47	; 0x2f
     880:	58 96       	adiw	r26, 0x18	; 24
     882:	01 90       	ld	r0, Z+
     884:	0d 92       	st	X+, r0
     886:	3a 95       	dec	r19
     888:	e1 f7       	brne	.-8      	; 0x882 <_ZN24LiquidCrystal_I2C_HangulC1Ehhh+0x82>
     88a:	38 e0       	ldi	r19, 0x08	; 8
     88c:	e8 e0       	ldi	r30, 0x08	; 8
     88e:	f1 e0       	ldi	r31, 0x01	; 1
     890:	ae a5       	ldd	r26, Y+46	; 0x2e
     892:	bf a5       	ldd	r27, Y+47	; 0x2f
     894:	90 96       	adiw	r26, 0x20	; 32
     896:	01 90       	ld	r0, Z+
     898:	0d 92       	st	X+, r0
     89a:	3a 95       	dec	r19
     89c:	e1 f7       	brne	.-8      	; 0x896 <_ZN24LiquidCrystal_I2C_HangulC1Ehhh+0x96>
     89e:	38 e0       	ldi	r19, 0x08	; 8
     8a0:	e0 e1       	ldi	r30, 0x10	; 16
     8a2:	f1 e0       	ldi	r31, 0x01	; 1
     8a4:	ae a5       	ldd	r26, Y+46	; 0x2e
     8a6:	bf a5       	ldd	r27, Y+47	; 0x2f
     8a8:	98 96       	adiw	r26, 0x28	; 40
     8aa:	01 90       	ld	r0, Z+
     8ac:	0d 92       	st	X+, r0
     8ae:	3a 95       	dec	r19
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <_ZN24LiquidCrystal_I2C_HangulC1Ehhh+0xaa>
     8b2:	38 e0       	ldi	r19, 0x08	; 8
     8b4:	e8 e1       	ldi	r30, 0x18	; 24
     8b6:	f1 e0       	ldi	r31, 0x01	; 1
     8b8:	ae a5       	ldd	r26, Y+46	; 0x2e
     8ba:	bf a5       	ldd	r27, Y+47	; 0x2f
     8bc:	d0 96       	adiw	r26, 0x30	; 48
     8be:	01 90       	ld	r0, Z+
     8c0:	0d 92       	st	X+, r0
     8c2:	3a 95       	dec	r19
     8c4:	e1 f7       	brne	.-8      	; 0x8be <_ZN24LiquidCrystal_I2C_HangulC1Ehhh+0xbe>
     8c6:	38 e0       	ldi	r19, 0x08	; 8
     8c8:	e0 e2       	ldi	r30, 0x20	; 32
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	ae a5       	ldd	r26, Y+46	; 0x2e
     8ce:	bf a5       	ldd	r27, Y+47	; 0x2f
     8d0:	d8 96       	adiw	r26, 0x38	; 56
     8d2:	01 90       	ld	r0, Z+
     8d4:	0d 92       	st	X+, r0
     8d6:	3a 95       	dec	r19
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <_ZN24LiquidCrystal_I2C_HangulC1Ehhh+0xd2>
     8da:	38 e0       	ldi	r19, 0x08	; 8
     8dc:	e8 e2       	ldi	r30, 0x28	; 40
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	ae a5       	ldd	r26, Y+46	; 0x2e
     8e2:	bf a5       	ldd	r27, Y+47	; 0x2f
     8e4:	a0 5c       	subi	r26, 0xC0	; 192
     8e6:	bf 4f       	sbci	r27, 0xFF	; 255
     8e8:	01 90       	ld	r0, Z+
     8ea:	0d 92       	st	X+, r0
     8ec:	3a 95       	dec	r19
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <_ZN24LiquidCrystal_I2C_HangulC1Ehhh+0xe8>
     8f0:	4e a5       	ldd	r20, Y+46	; 0x2e
     8f2:	5f a5       	ldd	r21, Y+47	; 0x2f
     8f4:	48 5b       	subi	r20, 0xB8	; 184
     8f6:	5f 4f       	sbci	r21, 0xFF	; 255
     8f8:	5c 83       	std	Y+4, r21	; 0x04
     8fa:	4b 83       	std	Y+3, r20	; 0x03
     8fc:	38 e0       	ldi	r19, 0x08	; 8
     8fe:	e0 e3       	ldi	r30, 0x30	; 48
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	da 01       	movw	r26, r20
     904:	01 90       	ld	r0, Z+
     906:	0d 92       	st	X+, r0
     908:	3a 95       	dec	r19
     90a:	e1 f7       	brne	.-8      	; 0x904 <__stack+0x5>
     90c:	6e a5       	ldd	r22, Y+46	; 0x2e
     90e:	7f a5       	ldd	r23, Y+47	; 0x2f
     910:	60 5b       	subi	r22, 0xB0	; 176
     912:	7f 4f       	sbci	r23, 0xFF	; 255
     914:	7e 83       	std	Y+6, r23	; 0x06
     916:	6d 83       	std	Y+5, r22	; 0x05
     918:	38 e0       	ldi	r19, 0x08	; 8
     91a:	e8 e3       	ldi	r30, 0x38	; 56
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	db 01       	movw	r26, r22
     920:	01 90       	ld	r0, Z+
     922:	0d 92       	st	X+, r0
     924:	3a 95       	dec	r19
     926:	e1 f7       	brne	.-8      	; 0x920 <__stack+0x21>
     928:	ae a5       	ldd	r26, Y+46	; 0x2e
     92a:	bf a5       	ldd	r27, Y+47	; 0x2f
     92c:	a8 5a       	subi	r26, 0xA8	; 168
     92e:	bf 4f       	sbci	r27, 0xFF	; 255
     930:	b8 87       	std	Y+8, r27	; 0x08
     932:	af 83       	std	Y+7, r26	; 0x07
     934:	38 e0       	ldi	r19, 0x08	; 8
     936:	e0 e4       	ldi	r30, 0x40	; 64
     938:	f1 e0       	ldi	r31, 0x01	; 1
     93a:	01 90       	ld	r0, Z+
     93c:	0d 92       	st	X+, r0
     93e:	3a 95       	dec	r19
     940:	e1 f7       	brne	.-8      	; 0x93a <__stack+0x3b>
     942:	4e a4       	ldd	r4, Y+46	; 0x2e
     944:	5f a4       	ldd	r5, Y+47	; 0x2f
     946:	b0 e6       	ldi	r27, 0x60	; 96
     948:	4b 0e       	add	r4, r27
     94a:	51 1c       	adc	r5, r1
     94c:	38 e0       	ldi	r19, 0x08	; 8
     94e:	e8 e4       	ldi	r30, 0x48	; 72
     950:	f1 e0       	ldi	r31, 0x01	; 1
     952:	d2 01       	movw	r26, r4
     954:	01 90       	ld	r0, Z+
     956:	0d 92       	st	X+, r0
     958:	3a 95       	dec	r19
     95a:	e1 f7       	brne	.-8      	; 0x954 <__stack+0x55>
     95c:	8e a4       	ldd	r8, Y+46	; 0x2e
     95e:	9f a4       	ldd	r9, Y+47	; 0x2f
     960:	e8 e6       	ldi	r30, 0x68	; 104
     962:	8e 0e       	add	r8, r30
     964:	91 1c       	adc	r9, r1
     966:	38 e0       	ldi	r19, 0x08	; 8
     968:	e0 e5       	ldi	r30, 0x50	; 80
     96a:	f1 e0       	ldi	r31, 0x01	; 1
     96c:	d4 01       	movw	r26, r8
     96e:	01 90       	ld	r0, Z+
     970:	0d 92       	st	X+, r0
     972:	3a 95       	dec	r19
     974:	e1 f7       	brne	.-8      	; 0x96e <__stack+0x6f>
     976:	ae a4       	ldd	r10, Y+46	; 0x2e
     978:	bf a4       	ldd	r11, Y+47	; 0x2f
     97a:	f0 e7       	ldi	r31, 0x70	; 112
     97c:	af 0e       	add	r10, r31
     97e:	b1 1c       	adc	r11, r1
     980:	38 e0       	ldi	r19, 0x08	; 8
     982:	e8 e5       	ldi	r30, 0x58	; 88
     984:	f1 e0       	ldi	r31, 0x01	; 1
     986:	d5 01       	movw	r26, r10
     988:	01 90       	ld	r0, Z+
     98a:	0d 92       	st	X+, r0
     98c:	3a 95       	dec	r19
     98e:	e1 f7       	brne	.-8      	; 0x988 <__stack+0x89>
     990:	ce a4       	ldd	r12, Y+46	; 0x2e
     992:	df a4       	ldd	r13, Y+47	; 0x2f
     994:	38 e7       	ldi	r19, 0x78	; 120
     996:	c3 0e       	add	r12, r19
     998:	d1 1c       	adc	r13, r1
     99a:	38 e0       	ldi	r19, 0x08	; 8
     99c:	e0 e6       	ldi	r30, 0x60	; 96
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	d6 01       	movw	r26, r12
     9a2:	01 90       	ld	r0, Z+
     9a4:	0d 92       	st	X+, r0
     9a6:	3a 95       	dec	r19
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <__stack+0xa3>
     9aa:	2e a4       	ldd	r2, Y+46	; 0x2e
     9ac:	3f a4       	ldd	r3, Y+47	; 0x2f
     9ae:	40 e8       	ldi	r20, 0x80	; 128
     9b0:	24 0e       	add	r2, r20
     9b2:	31 1c       	adc	r3, r1
     9b4:	38 e0       	ldi	r19, 0x08	; 8
     9b6:	e8 e6       	ldi	r30, 0x68	; 104
     9b8:	f1 e0       	ldi	r31, 0x01	; 1
     9ba:	d1 01       	movw	r26, r2
     9bc:	01 90       	ld	r0, Z+
     9be:	0d 92       	st	X+, r0
     9c0:	3a 95       	dec	r19
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <__stack+0xbd>
     9c4:	6e a5       	ldd	r22, Y+46	; 0x2e
     9c6:	7f a5       	ldd	r23, Y+47	; 0x2f
     9c8:	68 57       	subi	r22, 0x78	; 120
     9ca:	7f 4f       	sbci	r23, 0xFF	; 255
     9cc:	7a 87       	std	Y+10, r23	; 0x0a
     9ce:	69 87       	std	Y+9, r22	; 0x09
     9d0:	38 e0       	ldi	r19, 0x08	; 8
     9d2:	e0 e7       	ldi	r30, 0x70	; 112
     9d4:	f1 e0       	ldi	r31, 0x01	; 1
     9d6:	db 01       	movw	r26, r22
     9d8:	01 90       	ld	r0, Z+
     9da:	0d 92       	st	X+, r0
     9dc:	3a 95       	dec	r19
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <__stack+0xd9>
     9e0:	ae a5       	ldd	r26, Y+46	; 0x2e
     9e2:	bf a5       	ldd	r27, Y+47	; 0x2f
     9e4:	a0 57       	subi	r26, 0x70	; 112
     9e6:	bf 4f       	sbci	r27, 0xFF	; 255
     9e8:	ba 8b       	std	Y+18, r27	; 0x12
     9ea:	a9 8b       	std	Y+17, r26	; 0x11
     9ec:	38 e0       	ldi	r19, 0x08	; 8
     9ee:	e8 e7       	ldi	r30, 0x78	; 120
     9f0:	f1 e0       	ldi	r31, 0x01	; 1
     9f2:	01 90       	ld	r0, Z+
     9f4:	0d 92       	st	X+, r0
     9f6:	3a 95       	dec	r19
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <__stack+0xf3>
     9fa:	ee a5       	ldd	r30, Y+46	; 0x2e
     9fc:	ff a5       	ldd	r31, Y+47	; 0x2f
     9fe:	e8 56       	subi	r30, 0x68	; 104
     a00:	ff 4f       	sbci	r31, 0xFF	; 255
     a02:	fe 8b       	std	Y+22, r31	; 0x16
     a04:	ed 8b       	std	Y+21, r30	; 0x15
     a06:	38 e0       	ldi	r19, 0x08	; 8
     a08:	e0 e8       	ldi	r30, 0x80	; 128
     a0a:	f1 e0       	ldi	r31, 0x01	; 1
     a0c:	ad 89       	ldd	r26, Y+21	; 0x15
     a0e:	be 89       	ldd	r27, Y+22	; 0x16
     a10:	01 90       	ld	r0, Z+
     a12:	0d 92       	st	X+, r0
     a14:	3a 95       	dec	r19
     a16:	e1 f7       	brne	.-8      	; 0xa10 <__stack+0x111>
     a18:	4e a5       	ldd	r20, Y+46	; 0x2e
     a1a:	5f a5       	ldd	r21, Y+47	; 0x2f
     a1c:	40 56       	subi	r20, 0x60	; 96
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	5c 87       	std	Y+12, r21	; 0x0c
     a22:	4b 87       	std	Y+11, r20	; 0x0b
     a24:	38 e0       	ldi	r19, 0x08	; 8
     a26:	e8 e8       	ldi	r30, 0x88	; 136
     a28:	f1 e0       	ldi	r31, 0x01	; 1
     a2a:	da 01       	movw	r26, r20
     a2c:	01 90       	ld	r0, Z+
     a2e:	0d 92       	st	X+, r0
     a30:	3a 95       	dec	r19
     a32:	e1 f7       	brne	.-8      	; 0xa2c <__stack+0x12d>
     a34:	6e a5       	ldd	r22, Y+46	; 0x2e
     a36:	7f a5       	ldd	r23, Y+47	; 0x2f
     a38:	68 55       	subi	r22, 0x58	; 88
     a3a:	7f 4f       	sbci	r23, 0xFF	; 255
     a3c:	78 8f       	std	Y+24, r23	; 0x18
     a3e:	6f 8b       	std	Y+23, r22	; 0x17
     a40:	38 e0       	ldi	r19, 0x08	; 8
     a42:	e0 e9       	ldi	r30, 0x90	; 144
     a44:	f1 e0       	ldi	r31, 0x01	; 1
     a46:	db 01       	movw	r26, r22
     a48:	01 90       	ld	r0, Z+
     a4a:	0d 92       	st	X+, r0
     a4c:	3a 95       	dec	r19
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <__stack+0x149>
     a50:	ae a5       	ldd	r26, Y+46	; 0x2e
     a52:	bf a5       	ldd	r27, Y+47	; 0x2f
     a54:	a0 55       	subi	r26, 0x50	; 80
     a56:	bf 4f       	sbci	r27, 0xFF	; 255
     a58:	ba 8f       	std	Y+26, r27	; 0x1a
     a5a:	a9 8f       	std	Y+25, r26	; 0x19
     a5c:	1d 92       	st	X+, r1
     a5e:	2a 95       	dec	r18
     a60:	e9 f7       	brne	.-6      	; 0xa5c <__stack+0x15d>
     a62:	ee a5       	ldd	r30, Y+46	; 0x2e
     a64:	ff a5       	ldd	r31, Y+47	; 0x2f
     a66:	ea 54       	subi	r30, 0x4A	; 74
     a68:	ff 4f       	sbci	r31, 0xFF	; 255
     a6a:	2f e1       	ldi	r18, 0x1F	; 31
     a6c:	20 83       	st	Z, r18
     a6e:	ee a5       	ldd	r30, Y+46	; 0x2e
     a70:	ff a5       	ldd	r31, Y+47	; 0x2f
     a72:	e8 54       	subi	r30, 0x48	; 72
     a74:	ff 4f       	sbci	r31, 0xFF	; 255
     a76:	fc 8f       	std	Y+28, r31	; 0x1c
     a78:	eb 8f       	std	Y+27, r30	; 0x1b
     a7a:	28 e0       	ldi	r18, 0x08	; 8
     a7c:	e8 e9       	ldi	r30, 0x98	; 152
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	ab 8d       	ldd	r26, Y+27	; 0x1b
     a82:	bc 8d       	ldd	r27, Y+28	; 0x1c
     a84:	01 90       	ld	r0, Z+
     a86:	0d 92       	st	X+, r0
     a88:	2a 95       	dec	r18
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <__stack+0x185>
     a8c:	2e a5       	ldd	r18, Y+46	; 0x2e
     a8e:	3f a5       	ldd	r19, Y+47	; 0x2f
     a90:	20 54       	subi	r18, 0x40	; 64
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
     a94:	3e 8f       	std	Y+30, r19	; 0x1e
     a96:	2d 8f       	std	Y+29, r18	; 0x1d
     a98:	28 e0       	ldi	r18, 0x08	; 8
     a9a:	e0 ea       	ldi	r30, 0xA0	; 160
     a9c:	f1 e0       	ldi	r31, 0x01	; 1
     a9e:	ad 8d       	ldd	r26, Y+29	; 0x1d
     aa0:	be 8d       	ldd	r27, Y+30	; 0x1e
     aa2:	01 90       	ld	r0, Z+
     aa4:	0d 92       	st	X+, r0
     aa6:	2a 95       	dec	r18
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <__stack+0x1a3>
     aaa:	4e a5       	ldd	r20, Y+46	; 0x2e
     aac:	5f a5       	ldd	r21, Y+47	; 0x2f
     aae:	48 53       	subi	r20, 0x38	; 56
     ab0:	5f 4f       	sbci	r21, 0xFF	; 255
     ab2:	58 a3       	std	Y+32, r21	; 0x20
     ab4:	4f 8f       	std	Y+31, r20	; 0x1f
     ab6:	28 e0       	ldi	r18, 0x08	; 8
     ab8:	e8 ea       	ldi	r30, 0xA8	; 168
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	da 01       	movw	r26, r20
     abe:	01 90       	ld	r0, Z+
     ac0:	0d 92       	st	X+, r0
     ac2:	2a 95       	dec	r18
     ac4:	e1 f7       	brne	.-8      	; 0xabe <__stack+0x1bf>
     ac6:	6e a5       	ldd	r22, Y+46	; 0x2e
     ac8:	7f a5       	ldd	r23, Y+47	; 0x2f
     aca:	60 53       	subi	r22, 0x30	; 48
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	7a a3       	std	Y+34, r23	; 0x22
     ad0:	69 a3       	std	Y+33, r22	; 0x21
     ad2:	28 e0       	ldi	r18, 0x08	; 8
     ad4:	e0 eb       	ldi	r30, 0xB0	; 176
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	db 01       	movw	r26, r22
     ada:	01 90       	ld	r0, Z+
     adc:	0d 92       	st	X+, r0
     ade:	2a 95       	dec	r18
     ae0:	e1 f7       	brne	.-8      	; 0xada <__stack+0x1db>
     ae2:	ae a5       	ldd	r26, Y+46	; 0x2e
     ae4:	bf a5       	ldd	r27, Y+47	; 0x2f
     ae6:	a8 52       	subi	r26, 0x28	; 40
     ae8:	bf 4f       	sbci	r27, 0xFF	; 255
     aea:	bc a3       	std	Y+36, r27	; 0x24
     aec:	ab a3       	std	Y+35, r26	; 0x23
     aee:	28 e0       	ldi	r18, 0x08	; 8
     af0:	e8 eb       	ldi	r30, 0xB8	; 184
     af2:	f1 e0       	ldi	r31, 0x01	; 1
     af4:	01 90       	ld	r0, Z+
     af6:	0d 92       	st	X+, r0
     af8:	2a 95       	dec	r18
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <__stack+0x1f5>
     afc:	ee a4       	ldd	r14, Y+46	; 0x2e
     afe:	ff a4       	ldd	r15, Y+47	; 0x2f
     b00:	b0 ee       	ldi	r27, 0xE0	; 224
     b02:	eb 0e       	add	r14, r27
     b04:	f1 1c       	adc	r15, r1
     b06:	28 e0       	ldi	r18, 0x08	; 8
     b08:	e0 ec       	ldi	r30, 0xC0	; 192
     b0a:	f1 e0       	ldi	r31, 0x01	; 1
     b0c:	d7 01       	movw	r26, r14
     b0e:	01 90       	ld	r0, Z+
     b10:	0d 92       	st	X+, r0
     b12:	2a 95       	dec	r18
     b14:	e1 f7       	brne	.-8      	; 0xb0e <__stack+0x20f>
     b16:	ee a5       	ldd	r30, Y+46	; 0x2e
     b18:	ff a5       	ldd	r31, Y+47	; 0x2f
     b1a:	e8 51       	subi	r30, 0x18	; 24
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	fe a3       	std	Y+38, r31	; 0x26
     b20:	ed a3       	std	Y+37, r30	; 0x25
     b22:	28 e0       	ldi	r18, 0x08	; 8
     b24:	e8 ec       	ldi	r30, 0xC8	; 200
     b26:	f1 e0       	ldi	r31, 0x01	; 1
     b28:	ad a1       	ldd	r26, Y+37	; 0x25
     b2a:	be a1       	ldd	r27, Y+38	; 0x26
     b2c:	01 90       	ld	r0, Z+
     b2e:	0d 92       	st	X+, r0
     b30:	2a 95       	dec	r18
     b32:	e1 f7       	brne	.-8      	; 0xb2c <__stack+0x22d>
     b34:	4e a5       	ldd	r20, Y+46	; 0x2e
     b36:	5f a5       	ldd	r21, Y+47	; 0x2f
     b38:	40 51       	subi	r20, 0x10	; 16
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	28 e0       	ldi	r18, 0x08	; 8
     b3e:	e0 ed       	ldi	r30, 0xD0	; 208
     b40:	f1 e0       	ldi	r31, 0x01	; 1
     b42:	da 01       	movw	r26, r20
     b44:	01 90       	ld	r0, Z+
     b46:	0d 92       	st	X+, r0
     b48:	2a 95       	dec	r18
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <__stack+0x245>
     b4c:	2e a5       	ldd	r18, Y+46	; 0x2e
     b4e:	3f a5       	ldd	r19, Y+47	; 0x2f
     b50:	28 50       	subi	r18, 0x08	; 8
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	38 a7       	std	Y+40, r19	; 0x28
     b56:	2f a3       	std	Y+39, r18	; 0x27
     b58:	28 e0       	ldi	r18, 0x08	; 8
     b5a:	e8 ed       	ldi	r30, 0xD8	; 216
     b5c:	f1 e0       	ldi	r31, 0x01	; 1
     b5e:	af a1       	ldd	r26, Y+39	; 0x27
     b60:	b8 a5       	ldd	r27, Y+40	; 0x28
     b62:	01 90       	ld	r0, Z+
     b64:	0d 92       	st	X+, r0
     b66:	2a 95       	dec	r18
     b68:	e1 f7       	brne	.-8      	; 0xb62 <__stack+0x263>
     b6a:	6e a5       	ldd	r22, Y+46	; 0x2e
     b6c:	7f a5       	ldd	r23, Y+47	; 0x2f
     b6e:	73 95       	inc	r23
     b70:	7a a7       	std	Y+42, r23	; 0x2a
     b72:	69 a7       	std	Y+41, r22	; 0x29
     b74:	28 e0       	ldi	r18, 0x08	; 8
     b76:	e0 ee       	ldi	r30, 0xE0	; 224
     b78:	f1 e0       	ldi	r31, 0x01	; 1
     b7a:	db 01       	movw	r26, r22
     b7c:	01 90       	ld	r0, Z+
     b7e:	0d 92       	st	X+, r0
     b80:	2a 95       	dec	r18
     b82:	e1 f7       	brne	.-8      	; 0xb7c <__stack+0x27d>
     b84:	0e a5       	ldd	r16, Y+46	; 0x2e
     b86:	1f a5       	ldd	r17, Y+47	; 0x2f
     b88:	08 5f       	subi	r16, 0xF8	; 248
     b8a:	1e 4f       	sbci	r17, 0xFE	; 254
     b8c:	28 e0       	ldi	r18, 0x08	; 8
     b8e:	e8 ee       	ldi	r30, 0xE8	; 232
     b90:	f1 e0       	ldi	r31, 0x01	; 1
     b92:	d8 01       	movw	r26, r16
     b94:	01 90       	ld	r0, Z+
     b96:	0d 92       	st	X+, r0
     b98:	2a 95       	dec	r18
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <__stack+0x295>
     b9c:	6e a5       	ldd	r22, Y+46	; 0x2e
     b9e:	7f a5       	ldd	r23, Y+47	; 0x2f
     ba0:	60 5f       	subi	r22, 0xF0	; 240
     ba2:	7e 4f       	sbci	r23, 0xFE	; 254
     ba4:	28 e0       	ldi	r18, 0x08	; 8
     ba6:	e0 ef       	ldi	r30, 0xF0	; 240
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	db 01       	movw	r26, r22
     bac:	01 90       	ld	r0, Z+
     bae:	0d 92       	st	X+, r0
     bb0:	2a 95       	dec	r18
     bb2:	e1 f7       	brne	.-8      	; 0xbac <__stack+0x2ad>
     bb4:	2e a5       	ldd	r18, Y+46	; 0x2e
     bb6:	3f a5       	ldd	r19, Y+47	; 0x2f
     bb8:	28 5e       	subi	r18, 0xE8	; 232
     bba:	3e 4f       	sbci	r19, 0xFE	; 254
     bbc:	e8 e0       	ldi	r30, 0x08	; 8
     bbe:	6e 2e       	mov	r6, r30
     bc0:	e8 ef       	ldi	r30, 0xF8	; 248
     bc2:	f1 e0       	ldi	r31, 0x01	; 1
     bc4:	d9 01       	movw	r26, r18
     bc6:	01 90       	ld	r0, Z+
     bc8:	0d 92       	st	X+, r0
     bca:	6a 94       	dec	r6
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <__stack+0x2c7>
     bce:	ae a5       	ldd	r26, Y+46	; 0x2e
     bd0:	bf a5       	ldd	r27, Y+47	; 0x2f
     bd2:	58 96       	adiw	r26, 0x18	; 24
     bd4:	ba 83       	std	Y+2, r27	; 0x02
     bd6:	a9 83       	std	Y+1, r26	; 0x01
     bd8:	ee a5       	ldd	r30, Y+46	; 0x2e
     bda:	ff a5       	ldd	r31, Y+47	; 0x2f
     bdc:	e0 5e       	subi	r30, 0xE0	; 224
     bde:	fe 4f       	sbci	r31, 0xFE	; 254
     be0:	b1 83       	std	Z+1, r27	; 0x01
     be2:	a0 83       	st	Z, r26
     be4:	ee a5       	ldd	r30, Y+46	; 0x2e
     be6:	ff a5       	ldd	r31, Y+47	; 0x2f
     be8:	ee 5d       	subi	r30, 0xDE	; 222
     bea:	fe 4f       	sbci	r31, 0xFE	; 254
     bec:	a9 85       	ldd	r26, Y+9	; 0x09
     bee:	ba 85       	ldd	r27, Y+10	; 0x0a
     bf0:	b1 83       	std	Z+1, r27	; 0x01
     bf2:	a0 83       	st	Z, r26
     bf4:	ee a5       	ldd	r30, Y+46	; 0x2e
     bf6:	ff a5       	ldd	r31, Y+47	; 0x2f
     bf8:	b0 96       	adiw	r30, 0x20	; 32
     bfa:	fe 87       	std	Y+14, r31	; 0x0e
     bfc:	ed 87       	std	Y+13, r30	; 0x0d
     bfe:	ee a5       	ldd	r30, Y+46	; 0x2e
     c00:	ff a5       	ldd	r31, Y+47	; 0x2f
     c02:	ec 5d       	subi	r30, 0xDC	; 220
     c04:	fe 4f       	sbci	r31, 0xFE	; 254
     c06:	ad 85       	ldd	r26, Y+13	; 0x0d
     c08:	be 85       	ldd	r27, Y+14	; 0x0e
     c0a:	b1 83       	std	Z+1, r27	; 0x01
     c0c:	a0 83       	st	Z, r26
     c0e:	ee a5       	ldd	r30, Y+46	; 0x2e
     c10:	ff a5       	ldd	r31, Y+47	; 0x2f
     c12:	b8 96       	adiw	r30, 0x28	; 40
     c14:	f8 8b       	std	Y+16, r31	; 0x10
     c16:	ef 87       	std	Y+15, r30	; 0x0f
     c18:	ee a5       	ldd	r30, Y+46	; 0x2e
     c1a:	ff a5       	ldd	r31, Y+47	; 0x2f
     c1c:	ea 5d       	subi	r30, 0xDA	; 218
     c1e:	fe 4f       	sbci	r31, 0xFE	; 254
     c20:	af 85       	ldd	r26, Y+15	; 0x0f
     c22:	b8 89       	ldd	r27, Y+16	; 0x10
     c24:	b1 83       	std	Z+1, r27	; 0x01
     c26:	a0 83       	st	Z, r26
     c28:	ee a5       	ldd	r30, Y+46	; 0x2e
     c2a:	ff a5       	ldd	r31, Y+47	; 0x2f
     c2c:	e8 5d       	subi	r30, 0xD8	; 216
     c2e:	fe 4f       	sbci	r31, 0xFE	; 254
     c30:	a9 89       	ldd	r26, Y+17	; 0x11
     c32:	ba 89       	ldd	r27, Y+18	; 0x12
     c34:	b1 83       	std	Z+1, r27	; 0x01
     c36:	a0 83       	st	Z, r26
     c38:	6e a4       	ldd	r6, Y+46	; 0x2e
     c3a:	7f a4       	ldd	r7, Y+47	; 0x2f
     c3c:	b0 e3       	ldi	r27, 0x30	; 48
     c3e:	6b 0e       	add	r6, r27
     c40:	71 1c       	adc	r7, r1
     c42:	ee a5       	ldd	r30, Y+46	; 0x2e
     c44:	ff a5       	ldd	r31, Y+47	; 0x2f
     c46:	e6 5d       	subi	r30, 0xD6	; 214
     c48:	fe 4f       	sbci	r31, 0xFE	; 254
     c4a:	71 82       	std	Z+1, r7	; 0x01
     c4c:	60 82       	st	Z, r6
     c4e:	ee a5       	ldd	r30, Y+46	; 0x2e
     c50:	ff a5       	ldd	r31, Y+47	; 0x2f
     c52:	f8 96       	adiw	r30, 0x38	; 56
     c54:	fa 8b       	std	Y+18, r31	; 0x12
     c56:	e9 8b       	std	Y+17, r30	; 0x11
     c58:	ee a5       	ldd	r30, Y+46	; 0x2e
     c5a:	ff a5       	ldd	r31, Y+47	; 0x2f
     c5c:	e4 5d       	subi	r30, 0xD4	; 212
     c5e:	fe 4f       	sbci	r31, 0xFE	; 254
     c60:	a9 89       	ldd	r26, Y+17	; 0x11
     c62:	ba 89       	ldd	r27, Y+18	; 0x12
     c64:	b1 83       	std	Z+1, r27	; 0x01
     c66:	a0 83       	st	Z, r26
     c68:	ee a5       	ldd	r30, Y+46	; 0x2e
     c6a:	ff a5       	ldd	r31, Y+47	; 0x2f
     c6c:	e0 5c       	subi	r30, 0xC0	; 192
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	fc 8b       	std	Y+20, r31	; 0x14
     c72:	eb 8b       	std	Y+19, r30	; 0x13
     c74:	ee a5       	ldd	r30, Y+46	; 0x2e
     c76:	ff a5       	ldd	r31, Y+47	; 0x2f
     c78:	e2 5d       	subi	r30, 0xD2	; 210
     c7a:	fe 4f       	sbci	r31, 0xFE	; 254
     c7c:	ab 89       	ldd	r26, Y+19	; 0x13
     c7e:	bc 89       	ldd	r27, Y+20	; 0x14
     c80:	b1 83       	std	Z+1, r27	; 0x01
     c82:	a0 83       	st	Z, r26
     c84:	ee a5       	ldd	r30, Y+46	; 0x2e
     c86:	ff a5       	ldd	r31, Y+47	; 0x2f
     c88:	e0 5d       	subi	r30, 0xD0	; 208
     c8a:	fe 4f       	sbci	r31, 0xFE	; 254
     c8c:	ad 89       	ldd	r26, Y+21	; 0x15
     c8e:	be 89       	ldd	r27, Y+22	; 0x16
     c90:	b1 83       	std	Z+1, r27	; 0x01
     c92:	a0 83       	st	Z, r26
     c94:	ee a5       	ldd	r30, Y+46	; 0x2e
     c96:	ff a5       	ldd	r31, Y+47	; 0x2f
     c98:	ee 5c       	subi	r30, 0xCE	; 206
     c9a:	fe 4f       	sbci	r31, 0xFE	; 254
     c9c:	ab 81       	ldd	r26, Y+3	; 0x03
     c9e:	bc 81       	ldd	r27, Y+4	; 0x04
     ca0:	b1 83       	std	Z+1, r27	; 0x01
     ca2:	a0 83       	st	Z, r26
     ca4:	ee a5       	ldd	r30, Y+46	; 0x2e
     ca6:	ff a5       	ldd	r31, Y+47	; 0x2f
     ca8:	ec 5c       	subi	r30, 0xCC	; 204
     caa:	fe 4f       	sbci	r31, 0xFE	; 254
     cac:	ab 85       	ldd	r26, Y+11	; 0x0b
     cae:	bc 85       	ldd	r27, Y+12	; 0x0c
     cb0:	b1 83       	std	Z+1, r27	; 0x01
     cb2:	a0 83       	st	Z, r26
     cb4:	ee a5       	ldd	r30, Y+46	; 0x2e
     cb6:	ff a5       	ldd	r31, Y+47	; 0x2f
     cb8:	ea 5c       	subi	r30, 0xCA	; 202
     cba:	fe 4f       	sbci	r31, 0xFE	; 254
     cbc:	ad 81       	ldd	r26, Y+5	; 0x05
     cbe:	be 81       	ldd	r27, Y+6	; 0x06
     cc0:	b1 83       	std	Z+1, r27	; 0x01
     cc2:	a0 83       	st	Z, r26
     cc4:	ee a5       	ldd	r30, Y+46	; 0x2e
     cc6:	ff a5       	ldd	r31, Y+47	; 0x2f
     cc8:	e8 5c       	subi	r30, 0xC8	; 200
     cca:	fe 4f       	sbci	r31, 0xFE	; 254
     ccc:	af 81       	ldd	r26, Y+7	; 0x07
     cce:	b8 85       	ldd	r27, Y+8	; 0x08
     cd0:	b1 83       	std	Z+1, r27	; 0x01
     cd2:	a0 83       	st	Z, r26
     cd4:	ee a5       	ldd	r30, Y+46	; 0x2e
     cd6:	ff a5       	ldd	r31, Y+47	; 0x2f
     cd8:	e6 5c       	subi	r30, 0xC6	; 198
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	af 89       	ldd	r26, Y+23	; 0x17
     cde:	b8 8d       	ldd	r27, Y+24	; 0x18
     ce0:	b1 83       	std	Z+1, r27	; 0x01
     ce2:	a0 83       	st	Z, r26
     ce4:	ee a5       	ldd	r30, Y+46	; 0x2e
     ce6:	ff a5       	ldd	r31, Y+47	; 0x2f
     ce8:	e4 5c       	subi	r30, 0xC4	; 196
     cea:	fe 4f       	sbci	r31, 0xFE	; 254
     cec:	51 82       	std	Z+1, r5	; 0x01
     cee:	40 82       	st	Z, r4
     cf0:	ee a5       	ldd	r30, Y+46	; 0x2e
     cf2:	ff a5       	ldd	r31, Y+47	; 0x2f
     cf4:	e2 5c       	subi	r30, 0xC2	; 194
     cf6:	fe 4f       	sbci	r31, 0xFE	; 254
     cf8:	91 82       	std	Z+1, r9	; 0x01
     cfa:	80 82       	st	Z, r8
     cfc:	ee a5       	ldd	r30, Y+46	; 0x2e
     cfe:	ff a5       	ldd	r31, Y+47	; 0x2f
     d00:	e0 5c       	subi	r30, 0xC0	; 192
     d02:	fe 4f       	sbci	r31, 0xFE	; 254
     d04:	b1 82       	std	Z+1, r11	; 0x01
     d06:	a0 82       	st	Z, r10
     d08:	ee a5       	ldd	r30, Y+46	; 0x2e
     d0a:	ff a5       	ldd	r31, Y+47	; 0x2f
     d0c:	ee 5b       	subi	r30, 0xBE	; 190
     d0e:	fe 4f       	sbci	r31, 0xFE	; 254
     d10:	d1 82       	std	Z+1, r13	; 0x01
     d12:	c0 82       	st	Z, r12
     d14:	ee a5       	ldd	r30, Y+46	; 0x2e
     d16:	ff a5       	ldd	r31, Y+47	; 0x2f
     d18:	ec 5b       	subi	r30, 0xBC	; 188
     d1a:	fe 4f       	sbci	r31, 0xFE	; 254
     d1c:	31 82       	std	Z+1, r3	; 0x01
     d1e:	20 82       	st	Z, r2
     d20:	ee a5       	ldd	r30, Y+46	; 0x2e
     d22:	ff a5       	ldd	r31, Y+47	; 0x2f
     d24:	ea 5b       	subi	r30, 0xBA	; 186
     d26:	fe 4f       	sbci	r31, 0xFE	; 254
     d28:	ab a1       	ldd	r26, Y+35	; 0x23
     d2a:	bc a1       	ldd	r27, Y+36	; 0x24
     d2c:	b1 83       	std	Z+1, r27	; 0x01
     d2e:	a0 83       	st	Z, r26
     d30:	ee a5       	ldd	r30, Y+46	; 0x2e
     d32:	ff a5       	ldd	r31, Y+47	; 0x2f
     d34:	e8 5b       	subi	r30, 0xB8	; 184
     d36:	fe 4f       	sbci	r31, 0xFE	; 254
     d38:	a9 a5       	ldd	r26, Y+41	; 0x29
     d3a:	ba a5       	ldd	r27, Y+42	; 0x2a
     d3c:	b1 83       	std	Z+1, r27	; 0x01
     d3e:	a0 83       	st	Z, r26
     d40:	ee a5       	ldd	r30, Y+46	; 0x2e
     d42:	ff a5       	ldd	r31, Y+47	; 0x2f
     d44:	e6 5b       	subi	r30, 0xB6	; 182
     d46:	fe 4f       	sbci	r31, 0xFE	; 254
     d48:	f1 82       	std	Z+1, r15	; 0x01
     d4a:	e0 82       	st	Z, r14
     d4c:	ee a5       	ldd	r30, Y+46	; 0x2e
     d4e:	ff a5       	ldd	r31, Y+47	; 0x2f
     d50:	e4 5b       	subi	r30, 0xB4	; 180
     d52:	fe 4f       	sbci	r31, 0xFE	; 254
     d54:	11 83       	std	Z+1, r17	; 0x01
     d56:	00 83       	st	Z, r16
     d58:	ee a5       	ldd	r30, Y+46	; 0x2e
     d5a:	ff a5       	ldd	r31, Y+47	; 0x2f
     d5c:	e2 5b       	subi	r30, 0xB2	; 178
     d5e:	fe 4f       	sbci	r31, 0xFE	; 254
     d60:	ad a1       	ldd	r26, Y+37	; 0x25
     d62:	be a1       	ldd	r27, Y+38	; 0x26
     d64:	b1 83       	std	Z+1, r27	; 0x01
     d66:	a0 83       	st	Z, r26
     d68:	ee a5       	ldd	r30, Y+46	; 0x2e
     d6a:	ff a5       	ldd	r31, Y+47	; 0x2f
     d6c:	e0 5b       	subi	r30, 0xB0	; 176
     d6e:	fe 4f       	sbci	r31, 0xFE	; 254
     d70:	71 83       	std	Z+1, r23	; 0x01
     d72:	60 83       	st	Z, r22
     d74:	ee a5       	ldd	r30, Y+46	; 0x2e
     d76:	ff a5       	ldd	r31, Y+47	; 0x2f
     d78:	ee 5a       	subi	r30, 0xAE	; 174
     d7a:	fe 4f       	sbci	r31, 0xFE	; 254
     d7c:	51 83       	std	Z+1, r21	; 0x01
     d7e:	40 83       	st	Z, r20
     d80:	ee a5       	ldd	r30, Y+46	; 0x2e
     d82:	ff a5       	ldd	r31, Y+47	; 0x2f
     d84:	ec 5a       	subi	r30, 0xAC	; 172
     d86:	fe 4f       	sbci	r31, 0xFE	; 254
     d88:	31 83       	std	Z+1, r19	; 0x01
     d8a:	20 83       	st	Z, r18
     d8c:	ee a5       	ldd	r30, Y+46	; 0x2e
     d8e:	ff a5       	ldd	r31, Y+47	; 0x2f
     d90:	ea 5a       	subi	r30, 0xAA	; 170
     d92:	fe 4f       	sbci	r31, 0xFE	; 254
     d94:	2b 8d       	ldd	r18, Y+27	; 0x1b
     d96:	3c 8d       	ldd	r19, Y+28	; 0x1c
     d98:	31 83       	std	Z+1, r19	; 0x01
     d9a:	20 83       	st	Z, r18
     d9c:	ee a5       	ldd	r30, Y+46	; 0x2e
     d9e:	ff a5       	ldd	r31, Y+47	; 0x2f
     da0:	e8 5a       	subi	r30, 0xA8	; 168
     da2:	fe 4f       	sbci	r31, 0xFE	; 254
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	80 83       	st	Z, r24
     da8:	ee a5       	ldd	r30, Y+46	; 0x2e
     daa:	ff a5       	ldd	r31, Y+47	; 0x2f
     dac:	e6 5a       	subi	r30, 0xA6	; 166
     dae:	fe 4f       	sbci	r31, 0xFE	; 254
     db0:	91 83       	std	Z+1, r25	; 0x01
     db2:	80 83       	st	Z, r24
     db4:	ee a5       	ldd	r30, Y+46	; 0x2e
     db6:	ff a5       	ldd	r31, Y+47	; 0x2f
     db8:	e4 5a       	subi	r30, 0xA4	; 164
     dba:	fe 4f       	sbci	r31, 0xFE	; 254
     dbc:	91 83       	std	Z+1, r25	; 0x01
     dbe:	80 83       	st	Z, r24
     dc0:	ee a5       	ldd	r30, Y+46	; 0x2e
     dc2:	ff a5       	ldd	r31, Y+47	; 0x2f
     dc4:	e2 5a       	subi	r30, 0xA2	; 162
     dc6:	fe 4f       	sbci	r31, 0xFE	; 254
     dc8:	4d 8d       	ldd	r20, Y+29	; 0x1d
     dca:	5e 8d       	ldd	r21, Y+30	; 0x1e
     dcc:	51 83       	std	Z+1, r21	; 0x01
     dce:	40 83       	st	Z, r20
     dd0:	ee a5       	ldd	r30, Y+46	; 0x2e
     dd2:	ff a5       	ldd	r31, Y+47	; 0x2f
     dd4:	e0 5a       	subi	r30, 0xA0	; 160
     dd6:	fe 4f       	sbci	r31, 0xFE	; 254
     dd8:	6f 8d       	ldd	r22, Y+31	; 0x1f
     dda:	78 a1       	ldd	r23, Y+32	; 0x20
     ddc:	71 83       	std	Z+1, r23	; 0x01
     dde:	60 83       	st	Z, r22
     de0:	ee a5       	ldd	r30, Y+46	; 0x2e
     de2:	ff a5       	ldd	r31, Y+47	; 0x2f
     de4:	ee 59       	subi	r30, 0x9E	; 158
     de6:	fe 4f       	sbci	r31, 0xFE	; 254
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	80 83       	st	Z, r24
     dec:	ee a5       	ldd	r30, Y+46	; 0x2e
     dee:	ff a5       	ldd	r31, Y+47	; 0x2f
     df0:	ec 59       	subi	r30, 0x9C	; 156
     df2:	fe 4f       	sbci	r31, 0xFE	; 254
     df4:	91 83       	std	Z+1, r25	; 0x01
     df6:	80 83       	st	Z, r24
     df8:	ee a5       	ldd	r30, Y+46	; 0x2e
     dfa:	ff a5       	ldd	r31, Y+47	; 0x2f
     dfc:	ea 59       	subi	r30, 0x9A	; 154
     dfe:	fe 4f       	sbci	r31, 0xFE	; 254
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	80 83       	st	Z, r24
     e04:	ee a5       	ldd	r30, Y+46	; 0x2e
     e06:	ff a5       	ldd	r31, Y+47	; 0x2f
     e08:	e8 59       	subi	r30, 0x98	; 152
     e0a:	fe 4f       	sbci	r31, 0xFE	; 254
     e0c:	29 a1       	ldd	r18, Y+33	; 0x21
     e0e:	3a a1       	ldd	r19, Y+34	; 0x22
     e10:	31 83       	std	Z+1, r19	; 0x01
     e12:	20 83       	st	Z, r18
     e14:	ee a5       	ldd	r30, Y+46	; 0x2e
     e16:	ff a5       	ldd	r31, Y+47	; 0x2f
     e18:	e6 59       	subi	r30, 0x96	; 150
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	49 8d       	ldd	r20, Y+25	; 0x19
     e1e:	5a 8d       	ldd	r21, Y+26	; 0x1a
     e20:	51 83       	std	Z+1, r21	; 0x01
     e22:	40 83       	st	Z, r20
     e24:	ee a5       	ldd	r30, Y+46	; 0x2e
     e26:	ff a5       	ldd	r31, Y+47	; 0x2f
     e28:	e4 59       	subi	r30, 0x94	; 148
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	80 83       	st	Z, r24
     e30:	ee a5       	ldd	r30, Y+46	; 0x2e
     e32:	ff a5       	ldd	r31, Y+47	; 0x2f
     e34:	e2 59       	subi	r30, 0x92	; 146
     e36:	fe 4f       	sbci	r31, 0xFE	; 254
     e38:	6f a1       	ldd	r22, Y+39	; 0x27
     e3a:	78 a5       	ldd	r23, Y+40	; 0x28
     e3c:	71 83       	std	Z+1, r23	; 0x01
     e3e:	60 83       	st	Z, r22
     e40:	ee a5       	ldd	r30, Y+46	; 0x2e
     e42:	ff a5       	ldd	r31, Y+47	; 0x2f
     e44:	e0 59       	subi	r30, 0x90	; 144
     e46:	fe 4f       	sbci	r31, 0xFE	; 254
     e48:	24 e5       	ldi	r18, 0x54	; 84
     e4a:	df 01       	movw	r26, r30
     e4c:	1d 92       	st	X+, r1
     e4e:	2a 95       	dec	r18
     e50:	e9 f7       	brne	.-6      	; 0xe4c <__stack+0x54d>
     e52:	ee a5       	ldd	r30, Y+46	; 0x2e
     e54:	ff a5       	ldd	r31, Y+47	; 0x2f
     e56:	ec 56       	subi	r30, 0x6C	; 108
     e58:	fe 4f       	sbci	r31, 0xFE	; 254
     e5a:	28 e0       	ldi	r18, 0x08	; 8
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	31 83       	std	Z+1, r19	; 0x01
     e60:	20 83       	st	Z, r18
     e62:	ee a5       	ldd	r30, Y+46	; 0x2e
     e64:	ff a5       	ldd	r31, Y+47	; 0x2f
     e66:	e8 56       	subi	r30, 0x68	; 104
     e68:	fe 4f       	sbci	r31, 0xFE	; 254
     e6a:	31 83       	std	Z+1, r19	; 0x01
     e6c:	20 83       	st	Z, r18
     e6e:	ee a5       	ldd	r30, Y+46	; 0x2e
     e70:	ff a5       	ldd	r31, Y+47	; 0x2f
     e72:	e6 56       	subi	r30, 0x66	; 102
     e74:	fe 4f       	sbci	r31, 0xFE	; 254
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	51 83       	std	Z+1, r21	; 0x01
     e7c:	40 83       	st	Z, r20
     e7e:	ee a5       	ldd	r30, Y+46	; 0x2e
     e80:	ff a5       	ldd	r31, Y+47	; 0x2f
     e82:	e4 56       	subi	r30, 0x64	; 100
     e84:	fe 4f       	sbci	r31, 0xFE	; 254
     e86:	31 83       	std	Z+1, r19	; 0x01
     e88:	20 83       	st	Z, r18
     e8a:	ae a5       	ldd	r26, Y+46	; 0x2e
     e8c:	bf a5       	ldd	r27, Y+47	; 0x2f
     e8e:	a2 56       	subi	r26, 0x62	; 98
     e90:	be 4f       	sbci	r27, 0xFE	; 254
     e92:	e4 e1       	ldi	r30, 0x14	; 20
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	ed 93       	st	X+, r30
     e98:	fc 93       	st	X, r31
     e9a:	6e a5       	ldd	r22, Y+46	; 0x2e
     e9c:	7f a5       	ldd	r23, Y+47	; 0x2f
     e9e:	68 55       	subi	r22, 0x58	; 88
     ea0:	7e 4f       	sbci	r23, 0xFE	; 254
     ea2:	ad e0       	ldi	r26, 0x0D	; 13
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	fb 01       	movw	r30, r22
     ea8:	b1 83       	std	Z+1, r27	; 0x01
     eaa:	a0 83       	st	Z, r26
     eac:	0e a5       	ldd	r16, Y+46	; 0x2e
     eae:	1f a5       	ldd	r17, Y+47	; 0x2f
     eb0:	06 55       	subi	r16, 0x56	; 86
     eb2:	1e 4f       	sbci	r17, 0xFE	; 254
     eb4:	64 e0       	ldi	r22, 0x04	; 4
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	f8 01       	movw	r30, r16
     eba:	71 83       	std	Z+1, r23	; 0x01
     ebc:	60 83       	st	Z, r22
     ebe:	0e a5       	ldd	r16, Y+46	; 0x2e
     ec0:	1f a5       	ldd	r17, Y+47	; 0x2f
     ec2:	04 55       	subi	r16, 0x54	; 84
     ec4:	1e 4f       	sbci	r17, 0xFE	; 254
     ec6:	f8 01       	movw	r30, r16
     ec8:	b1 83       	std	Z+1, r27	; 0x01
     eca:	a0 83       	st	Z, r26
     ecc:	0e a5       	ldd	r16, Y+46	; 0x2e
     ece:	1f a5       	ldd	r17, Y+47	; 0x2f
     ed0:	02 55       	subi	r16, 0x52	; 82
     ed2:	1e 4f       	sbci	r17, 0xFE	; 254
     ed4:	f5 e0       	ldi	r31, 0x05	; 5
     ed6:	ef 2e       	mov	r14, r31
     ed8:	f1 2c       	mov	r15, r1
     eda:	f8 01       	movw	r30, r16
     edc:	f1 82       	std	Z+1, r15	; 0x01
     ede:	e0 82       	st	Z, r14
     ee0:	0e a5       	ldd	r16, Y+46	; 0x2e
     ee2:	1f a5       	ldd	r17, Y+47	; 0x2f
     ee4:	00 55       	subi	r16, 0x50	; 80
     ee6:	1e 4f       	sbci	r17, 0xFE	; 254
     ee8:	f8 01       	movw	r30, r16
     eea:	b1 83       	std	Z+1, r27	; 0x01
     eec:	a0 83       	st	Z, r26
     eee:	ae a5       	ldd	r26, Y+46	; 0x2e
     ef0:	bf a5       	ldd	r27, Y+47	; 0x2f
     ef2:	ae 54       	subi	r26, 0x4E	; 78
     ef4:	be 4f       	sbci	r27, 0xFE	; 254
     ef6:	e4 e1       	ldi	r30, 0x14	; 20
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	ed 93       	st	X+, r30
     efc:	fc 93       	st	X, r31
     efe:	ae a5       	ldd	r26, Y+46	; 0x2e
     f00:	bf a5       	ldd	r27, Y+47	; 0x2f
     f02:	a4 54       	subi	r26, 0x44	; 68
     f04:	be 4f       	sbci	r27, 0xFE	; 254
     f06:	02 e1       	ldi	r16, 0x12	; 18
     f08:	10 e0       	ldi	r17, 0x00	; 0
     f0a:	0d 93       	st	X+, r16
     f0c:	1c 93       	st	X, r17
     f0e:	ae a5       	ldd	r26, Y+46	; 0x2e
     f10:	bf a5       	ldd	r27, Y+47	; 0x2f
     f12:	a2 54       	subi	r26, 0x42	; 66
     f14:	be 4f       	sbci	r27, 0xFE	; 254
     f16:	ed 93       	st	X+, r30
     f18:	fc 93       	st	X, r31
     f1a:	ee a5       	ldd	r30, Y+46	; 0x2e
     f1c:	ff a5       	ldd	r31, Y+47	; 0x2f
     f1e:	ec 53       	subi	r30, 0x3C	; 60
     f20:	fe 4f       	sbci	r31, 0xFE	; 254
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	80 83       	st	Z, r24
     f26:	ee a5       	ldd	r30, Y+46	; 0x2e
     f28:	ff a5       	ldd	r31, Y+47	; 0x2f
     f2a:	ea 53       	subi	r30, 0x3A	; 58
     f2c:	fe 4f       	sbci	r31, 0xFE	; 254
     f2e:	a9 81       	ldd	r26, Y+1	; 0x01
     f30:	ba 81       	ldd	r27, Y+2	; 0x02
     f32:	b1 83       	std	Z+1, r27	; 0x01
     f34:	a0 83       	st	Z, r26
     f36:	ee a5       	ldd	r30, Y+46	; 0x2e
     f38:	ff a5       	ldd	r31, Y+47	; 0x2f
     f3a:	e8 53       	subi	r30, 0x38	; 56
     f3c:	fe 4f       	sbci	r31, 0xFE	; 254
     f3e:	a9 85       	ldd	r26, Y+9	; 0x09
     f40:	ba 85       	ldd	r27, Y+10	; 0x0a
     f42:	b1 83       	std	Z+1, r27	; 0x01
     f44:	a0 83       	st	Z, r26
     f46:	ee a5       	ldd	r30, Y+46	; 0x2e
     f48:	ff a5       	ldd	r31, Y+47	; 0x2f
     f4a:	e6 53       	subi	r30, 0x36	; 54
     f4c:	fe 4f       	sbci	r31, 0xFE	; 254
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	80 83       	st	Z, r24
     f52:	ee a5       	ldd	r30, Y+46	; 0x2e
     f54:	ff a5       	ldd	r31, Y+47	; 0x2f
     f56:	e4 53       	subi	r30, 0x34	; 52
     f58:	fe 4f       	sbci	r31, 0xFE	; 254
     f5a:	ad 85       	ldd	r26, Y+13	; 0x0d
     f5c:	be 85       	ldd	r27, Y+14	; 0x0e
     f5e:	b1 83       	std	Z+1, r27	; 0x01
     f60:	a0 83       	st	Z, r26
     f62:	ee a5       	ldd	r30, Y+46	; 0x2e
     f64:	ff a5       	ldd	r31, Y+47	; 0x2f
     f66:	e2 53       	subi	r30, 0x32	; 50
     f68:	fe 4f       	sbci	r31, 0xFE	; 254
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	ee a5       	ldd	r30, Y+46	; 0x2e
     f70:	ff a5       	ldd	r31, Y+47	; 0x2f
     f72:	e0 53       	subi	r30, 0x30	; 48
     f74:	fe 4f       	sbci	r31, 0xFE	; 254
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	80 83       	st	Z, r24
     f7a:	ee a5       	ldd	r30, Y+46	; 0x2e
     f7c:	ff a5       	ldd	r31, Y+47	; 0x2f
     f7e:	ee 52       	subi	r30, 0x2E	; 46
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	af 85       	ldd	r26, Y+15	; 0x0f
     f84:	b8 89       	ldd	r27, Y+16	; 0x10
     f86:	b1 83       	std	Z+1, r27	; 0x01
     f88:	a0 83       	st	Z, r26
     f8a:	ee a5       	ldd	r30, Y+46	; 0x2e
     f8c:	ff a5       	ldd	r31, Y+47	; 0x2f
     f8e:	ec 52       	subi	r30, 0x2C	; 44
     f90:	fe 4f       	sbci	r31, 0xFE	; 254
     f92:	71 82       	std	Z+1, r7	; 0x01
     f94:	60 82       	st	Z, r6
     f96:	ee a5       	ldd	r30, Y+46	; 0x2e
     f98:	ff a5       	ldd	r31, Y+47	; 0x2f
     f9a:	ea 52       	subi	r30, 0x2A	; 42
     f9c:	fe 4f       	sbci	r31, 0xFE	; 254
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	80 83       	st	Z, r24
     fa2:	ee a5       	ldd	r30, Y+46	; 0x2e
     fa4:	ff a5       	ldd	r31, Y+47	; 0x2f
     fa6:	e8 52       	subi	r30, 0x28	; 40
     fa8:	fe 4f       	sbci	r31, 0xFE	; 254
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24
     fae:	ee a5       	ldd	r30, Y+46	; 0x2e
     fb0:	ff a5       	ldd	r31, Y+47	; 0x2f
     fb2:	e6 52       	subi	r30, 0x26	; 38
     fb4:	fe 4f       	sbci	r31, 0xFE	; 254
     fb6:	91 83       	std	Z+1, r25	; 0x01
     fb8:	80 83       	st	Z, r24
     fba:	ee a5       	ldd	r30, Y+46	; 0x2e
     fbc:	ff a5       	ldd	r31, Y+47	; 0x2f
     fbe:	e4 52       	subi	r30, 0x24	; 36
     fc0:	fe 4f       	sbci	r31, 0xFE	; 254
     fc2:	91 83       	std	Z+1, r25	; 0x01
     fc4:	80 83       	st	Z, r24
     fc6:	ee a5       	ldd	r30, Y+46	; 0x2e
     fc8:	ff a5       	ldd	r31, Y+47	; 0x2f
     fca:	e2 52       	subi	r30, 0x22	; 34
     fcc:	fe 4f       	sbci	r31, 0xFE	; 254
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	80 83       	st	Z, r24
     fd2:	ee a5       	ldd	r30, Y+46	; 0x2e
     fd4:	ff a5       	ldd	r31, Y+47	; 0x2f
     fd6:	e0 52       	subi	r30, 0x20	; 32
     fd8:	fe 4f       	sbci	r31, 0xFE	; 254
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	80 83       	st	Z, r24
     fde:	ee a5       	ldd	r30, Y+46	; 0x2e
     fe0:	ff a5       	ldd	r31, Y+47	; 0x2f
     fe2:	ee 51       	subi	r30, 0x1E	; 30
     fe4:	fe 4f       	sbci	r31, 0xFE	; 254
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	80 83       	st	Z, r24
     fea:	ee a5       	ldd	r30, Y+46	; 0x2e
     fec:	ff a5       	ldd	r31, Y+47	; 0x2f
     fee:	ec 51       	subi	r30, 0x1C	; 28
     ff0:	fe 4f       	sbci	r31, 0xFE	; 254
     ff2:	a9 89       	ldd	r26, Y+17	; 0x11
     ff4:	ba 89       	ldd	r27, Y+18	; 0x12
     ff6:	b1 83       	std	Z+1, r27	; 0x01
     ff8:	a0 83       	st	Z, r26
     ffa:	ee a5       	ldd	r30, Y+46	; 0x2e
     ffc:	ff a5       	ldd	r31, Y+47	; 0x2f
     ffe:	ea 51       	subi	r30, 0x1A	; 26
    1000:	fe 4f       	sbci	r31, 0xFE	; 254
    1002:	ab 89       	ldd	r26, Y+19	; 0x13
    1004:	bc 89       	ldd	r27, Y+20	; 0x14
    1006:	b1 83       	std	Z+1, r27	; 0x01
    1008:	a0 83       	st	Z, r26
    100a:	ee a5       	ldd	r30, Y+46	; 0x2e
    100c:	ff a5       	ldd	r31, Y+47	; 0x2f
    100e:	e8 51       	subi	r30, 0x18	; 24
    1010:	fe 4f       	sbci	r31, 0xFE	; 254
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	80 83       	st	Z, r24
    1016:	ee a5       	ldd	r30, Y+46	; 0x2e
    1018:	ff a5       	ldd	r31, Y+47	; 0x2f
    101a:	e6 51       	subi	r30, 0x16	; 22
    101c:	fe 4f       	sbci	r31, 0xFE	; 254
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	80 83       	st	Z, r24
    1026:	ee a5       	ldd	r30, Y+46	; 0x2e
    1028:	ff a5       	ldd	r31, Y+47	; 0x2f
    102a:	e4 51       	subi	r30, 0x14	; 20
    102c:	fe 4f       	sbci	r31, 0xFE	; 254
    102e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1030:	9c 85       	ldd	r25, Y+12	; 0x0c
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	80 83       	st	Z, r24
    1036:	ee a5       	ldd	r30, Y+46	; 0x2e
    1038:	ff a5       	ldd	r31, Y+47	; 0x2f
    103a:	e2 51       	subi	r30, 0x12	; 18
    103c:	fe 4f       	sbci	r31, 0xFE	; 254
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	80 83       	st	Z, r24
    1046:	ee a5       	ldd	r30, Y+46	; 0x2e
    1048:	ff a5       	ldd	r31, Y+47	; 0x2f
    104a:	e0 51       	subi	r30, 0x10	; 16
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	8f 81       	ldd	r24, Y+7	; 0x07
    1050:	98 85       	ldd	r25, Y+8	; 0x08
    1052:	91 83       	std	Z+1, r25	; 0x01
    1054:	80 83       	st	Z, r24
    1056:	ee a5       	ldd	r30, Y+46	; 0x2e
    1058:	ff a5       	ldd	r31, Y+47	; 0x2f
    105a:	ee 50       	subi	r30, 0x0E	; 14
    105c:	fe 4f       	sbci	r31, 0xFE	; 254
    105e:	51 82       	std	Z+1, r5	; 0x01
    1060:	40 82       	st	Z, r4
    1062:	ee a5       	ldd	r30, Y+46	; 0x2e
    1064:	ff a5       	ldd	r31, Y+47	; 0x2f
    1066:	ec 50       	subi	r30, 0x0C	; 12
    1068:	fe 4f       	sbci	r31, 0xFE	; 254
    106a:	91 82       	std	Z+1, r9	; 0x01
    106c:	80 82       	st	Z, r8
    106e:	ee a5       	ldd	r30, Y+46	; 0x2e
    1070:	ff a5       	ldd	r31, Y+47	; 0x2f
    1072:	ea 50       	subi	r30, 0x0A	; 10
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	b1 82       	std	Z+1, r11	; 0x01
    1078:	a0 82       	st	Z, r10
    107a:	ee a5       	ldd	r30, Y+46	; 0x2e
    107c:	ff a5       	ldd	r31, Y+47	; 0x2f
    107e:	e8 50       	subi	r30, 0x08	; 8
    1080:	fe 4f       	sbci	r31, 0xFE	; 254
    1082:	d1 82       	std	Z+1, r13	; 0x01
    1084:	c0 82       	st	Z, r12
    1086:	ee a5       	ldd	r30, Y+46	; 0x2e
    1088:	ff a5       	ldd	r31, Y+47	; 0x2f
    108a:	e6 50       	subi	r30, 0x06	; 6
    108c:	fe 4f       	sbci	r31, 0xFE	; 254
    108e:	31 82       	std	Z+1, r3	; 0x01
    1090:	20 82       	st	Z, r2
    1092:	ee a5       	ldd	r30, Y+46	; 0x2e
    1094:	ff a5       	ldd	r31, Y+47	; 0x2f
    1096:	e4 50       	subi	r30, 0x04	; 4
    1098:	fe 4f       	sbci	r31, 0xFE	; 254
    109a:	80 e7       	ldi	r24, 0x70	; 112
    109c:	df 01       	movw	r26, r30
    109e:	1d 92       	st	X+, r1
    10a0:	8a 95       	dec	r24
    10a2:	e9 f7       	brne	.-6      	; 0x109e <__stack+0x79f>
    10a4:	ee a5       	ldd	r30, Y+46	; 0x2e
    10a6:	ff a5       	ldd	r31, Y+47	; 0x2f
    10a8:	e8 5f       	subi	r30, 0xF8	; 248
    10aa:	fd 4f       	sbci	r31, 0xFD	; 253
    10ac:	51 83       	std	Z+1, r21	; 0x01
    10ae:	40 83       	st	Z, r20
    10b0:	ee a5       	ldd	r30, Y+46	; 0x2e
    10b2:	ff a5       	ldd	r31, Y+47	; 0x2f
    10b4:	e6 5f       	subi	r30, 0xF6	; 246
    10b6:	fd 4f       	sbci	r31, 0xFD	; 253
    10b8:	83 e1       	ldi	r24, 0x13	; 19
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	80 83       	st	Z, r24
    10c0:	ee a5       	ldd	r30, Y+46	; 0x2e
    10c2:	ff a5       	ldd	r31, Y+47	; 0x2f
    10c4:	e0 5f       	subi	r30, 0xF0	; 240
    10c6:	fd 4f       	sbci	r31, 0xFD	; 253
    10c8:	71 83       	std	Z+1, r23	; 0x01
    10ca:	60 83       	st	Z, r22
    10cc:	ee a5       	ldd	r30, Y+46	; 0x2e
    10ce:	ff a5       	ldd	r31, Y+47	; 0x2f
    10d0:	ee 5e       	subi	r30, 0xEE	; 238
    10d2:	fd 4f       	sbci	r31, 0xFD	; 253
    10d4:	a6 e1       	ldi	r26, 0x16	; 22
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	b1 83       	std	Z+1, r27	; 0x01
    10da:	a0 83       	st	Z, r26
    10dc:	ee a5       	ldd	r30, Y+46	; 0x2e
    10de:	ff a5       	ldd	r31, Y+47	; 0x2f
    10e0:	ec 5e       	subi	r30, 0xEC	; 236
    10e2:	fd 4f       	sbci	r31, 0xFD	; 253
    10e4:	71 83       	std	Z+1, r23	; 0x01
    10e6:	60 83       	st	Z, r22
    10e8:	ee a5       	ldd	r30, Y+46	; 0x2e
    10ea:	ff a5       	ldd	r31, Y+47	; 0x2f
    10ec:	ea 5e       	subi	r30, 0xEA	; 234
    10ee:	fd 4f       	sbci	r31, 0xFD	; 253
    10f0:	6b e1       	ldi	r22, 0x1B	; 27
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	71 83       	std	Z+1, r23	; 0x01
    10f6:	60 83       	st	Z, r22
    10f8:	ee a5       	ldd	r30, Y+46	; 0x2e
    10fa:	ff a5       	ldd	r31, Y+47	; 0x2f
    10fc:	e0 5e       	subi	r30, 0xE0	; 224
    10fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1100:	31 83       	std	Z+1, r19	; 0x01
    1102:	20 83       	st	Z, r18
    1104:	ee a5       	ldd	r30, Y+46	; 0x2e
    1106:	ff a5       	ldd	r31, Y+47	; 0x2f
    1108:	ee 5d       	subi	r30, 0xDE	; 222
    110a:	fd 4f       	sbci	r31, 0xFD	; 253
    110c:	51 83       	std	Z+1, r21	; 0x01
    110e:	40 83       	st	Z, r20
    1110:	ee a5       	ldd	r30, Y+46	; 0x2e
    1112:	ff a5       	ldd	r31, Y+47	; 0x2f
    1114:	ec 5d       	subi	r30, 0xDC	; 220
    1116:	fd 4f       	sbci	r31, 0xFD	; 253
    1118:	31 83       	std	Z+1, r19	; 0x01
    111a:	20 83       	st	Z, r18
    111c:	ee a5       	ldd	r30, Y+46	; 0x2e
    111e:	ff a5       	ldd	r31, Y+47	; 0x2f
    1120:	ea 5d       	subi	r30, 0xDA	; 218
    1122:	fd 4f       	sbci	r31, 0xFD	; 253
    1124:	40 e1       	ldi	r20, 0x10	; 16
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	51 83       	std	Z+1, r21	; 0x01
    112a:	40 83       	st	Z, r20
    112c:	ee a5       	ldd	r30, Y+46	; 0x2e
    112e:	ff a5       	ldd	r31, Y+47	; 0x2f
    1130:	e8 5d       	subi	r30, 0xD8	; 216
    1132:	fd 4f       	sbci	r31, 0xFD	; 253
    1134:	31 83       	std	Z+1, r19	; 0x01
    1136:	20 83       	st	Z, r18
    1138:	ee a5       	ldd	r30, Y+46	; 0x2e
    113a:	ff a5       	ldd	r31, Y+47	; 0x2f
    113c:	e6 5d       	subi	r30, 0xD6	; 214
    113e:	fd 4f       	sbci	r31, 0xFD	; 253
    1140:	41 e1       	ldi	r20, 0x11	; 17
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	51 83       	std	Z+1, r21	; 0x01
    1146:	40 83       	st	Z, r20
    1148:	ee a5       	ldd	r30, Y+46	; 0x2e
    114a:	ff a5       	ldd	r31, Y+47	; 0x2f
    114c:	e4 5d       	subi	r30, 0xD4	; 212
    114e:	fd 4f       	sbci	r31, 0xFD	; 253
    1150:	31 83       	std	Z+1, r19	; 0x01
    1152:	20 83       	st	Z, r18
    1154:	ee a5       	ldd	r30, Y+46	; 0x2e
    1156:	ff a5       	ldd	r31, Y+47	; 0x2f
    1158:	e2 5d       	subi	r30, 0xD2	; 210
    115a:	fd 4f       	sbci	r31, 0xFD	; 253
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	80 83       	st	Z, r24
    1160:	ee a5       	ldd	r30, Y+46	; 0x2e
    1162:	ff a5       	ldd	r31, Y+47	; 0x2f
    1164:	e0 5d       	subi	r30, 0xD0	; 208
    1166:	fd 4f       	sbci	r31, 0xFD	; 253
    1168:	31 83       	std	Z+1, r19	; 0x01
    116a:	20 83       	st	Z, r18
    116c:	ee a5       	ldd	r30, Y+46	; 0x2e
    116e:	ff a5       	ldd	r31, Y+47	; 0x2f
    1170:	ee 5c       	subi	r30, 0xCE	; 206
    1172:	fd 4f       	sbci	r31, 0xFD	; 253
    1174:	a9 e1       	ldi	r26, 0x19	; 25
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	b1 83       	std	Z+1, r27	; 0x01
    117a:	a0 83       	st	Z, r26
    117c:	ee a5       	ldd	r30, Y+46	; 0x2e
    117e:	ff a5       	ldd	r31, Y+47	; 0x2f
    1180:	ec 5c       	subi	r30, 0xCC	; 204
    1182:	fd 4f       	sbci	r31, 0xFD	; 253
    1184:	31 83       	std	Z+1, r19	; 0x01
    1186:	20 83       	st	Z, r18
    1188:	ee a5       	ldd	r30, Y+46	; 0x2e
    118a:	ff a5       	ldd	r31, Y+47	; 0x2f
    118c:	ea 5c       	subi	r30, 0xCA	; 202
    118e:	fd 4f       	sbci	r31, 0xFD	; 253
    1190:	aa e1       	ldi	r26, 0x1A	; 26
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	b1 83       	std	Z+1, r27	; 0x01
    1196:	a0 83       	st	Z, r26
    1198:	ee a5       	ldd	r30, Y+46	; 0x2e
    119a:	ff a5       	ldd	r31, Y+47	; 0x2f
    119c:	e8 5c       	subi	r30, 0xC8	; 200
    119e:	fd 4f       	sbci	r31, 0xFD	; 253
    11a0:	31 83       	std	Z+1, r19	; 0x01
    11a2:	20 83       	st	Z, r18
    11a4:	ee a5       	ldd	r30, Y+46	; 0x2e
    11a6:	ff a5       	ldd	r31, Y+47	; 0x2f
    11a8:	e6 5c       	subi	r30, 0xC6	; 198
    11aa:	fd 4f       	sbci	r31, 0xFD	; 253
    11ac:	71 83       	std	Z+1, r23	; 0x01
    11ae:	60 83       	st	Z, r22
    11b0:	ee a5       	ldd	r30, Y+46	; 0x2e
    11b2:	ff a5       	ldd	r31, Y+47	; 0x2f
    11b4:	ec 5b       	subi	r30, 0xBC	; 188
    11b6:	fd 4f       	sbci	r31, 0xFD	; 253
    11b8:	51 83       	std	Z+1, r21	; 0x01
    11ba:	40 83       	st	Z, r20
    11bc:	ee a5       	ldd	r30, Y+46	; 0x2e
    11be:	ff a5       	ldd	r31, Y+47	; 0x2f
    11c0:	ea 5b       	subi	r30, 0xBA	; 186
    11c2:	fd 4f       	sbci	r31, 0xFD	; 253
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	80 83       	st	Z, r24
    11c8:	7b a4       	ldd	r7, Y+43	; 0x2b
    11ca:	ee a5       	ldd	r30, Y+46	; 0x2e
    11cc:	ff a5       	ldd	r31, Y+47	; 0x2f
    11ce:	74 82       	std	Z+4, r7	; 0x04
    11d0:	3c a5       	ldd	r19, Y+44	; 0x2c
    11d2:	31 87       	std	Z+9, r19	; 0x09
    11d4:	4d a5       	ldd	r20, Y+45	; 0x2d
    11d6:	42 87       	std	Z+10, r20	; 0x0a
    11d8:	13 86       	std	Z+11, r1	; 0x0b
    11da:	af 96       	adiw	r28, 0x2f	; 47
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	bf 90       	pop	r11
    11f8:	af 90       	pop	r10
    11fa:	9f 90       	pop	r9
    11fc:	8f 90       	pop	r8
    11fe:	7f 90       	pop	r7
    1200:	6f 90       	pop	r6
    1202:	5f 90       	pop	r5
    1204:	4f 90       	pop	r4
    1206:	3f 90       	pop	r3
    1208:	2f 90       	pop	r2
    120a:	08 95       	ret

0000120c <_ZN24LiquidCrystal_I2C_Hangul13expanderWriteEh>:
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	ec 01       	movw	r28, r24
    1214:	16 2f       	mov	r17, r22
    1216:	6c 81       	ldd	r22, Y+4	; 0x04
    1218:	8e e9       	ldi	r24, 0x9E	; 158
    121a:	95 e0       	ldi	r25, 0x05	; 5
    121c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <_ZN7TwoWire17beginTransmissionEh>
    1220:	6b 85       	ldd	r22, Y+11	; 0x0b
    1222:	61 2b       	or	r22, r17
    1224:	8e e9       	ldi	r24, 0x9E	; 158
    1226:	95 e0       	ldi	r25, 0x05	; 5
    1228:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN7TwoWire5writeEh>
    122c:	8e e9       	ldi	r24, 0x9E	; 158
    122e:	95 e0       	ldi	r25, 0x05	; 5
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <_ZN7TwoWire15endTransmissionEv>

0000123a <_ZN24LiquidCrystal_I2C_Hangul9backlightEv>:
    123a:	28 e0       	ldi	r18, 0x08	; 8
    123c:	fc 01       	movw	r30, r24
    123e:	23 87       	std	Z+11, r18	; 0x0b
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	0c 94 06 09 	jmp	0x120c	; 0x120c <_ZN24LiquidCrystal_I2C_Hangul13expanderWriteEh>

00001246 <_ZN24LiquidCrystal_I2C_Hangul11pulseEnableEh>:
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	8c 01       	movw	r16, r24
    124e:	c6 2f       	mov	r28, r22
    1250:	64 60       	ori	r22, 0x04	; 4
    1252:	0e 94 06 09 	call	0x120c	; 0x120c <_ZN24LiquidCrystal_I2C_Hangul13expanderWriteEh>
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 ba 03 	call	0x774	; 0x774 <delayMicroseconds>
    125e:	6c 2f       	mov	r22, r28
    1260:	6b 7f       	andi	r22, 0xFB	; 251
    1262:	c8 01       	movw	r24, r16
    1264:	0e 94 06 09 	call	0x120c	; 0x120c <_ZN24LiquidCrystal_I2C_Hangul13expanderWriteEh>
    1268:	82 e3       	ldi	r24, 0x32	; 50
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	0c 94 ba 03 	jmp	0x774	; 0x774 <delayMicroseconds>

00001276 <_ZN24LiquidCrystal_I2C_Hangul10write4bitsEh>:
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	ec 01       	movw	r28, r24
    127e:	16 2f       	mov	r17, r22
    1280:	0e 94 06 09 	call	0x120c	; 0x120c <_ZN24LiquidCrystal_I2C_Hangul13expanderWriteEh>
    1284:	61 2f       	mov	r22, r17
    1286:	ce 01       	movw	r24, r28
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0c 94 23 09 	jmp	0x1246	; 0x1246 <_ZN24LiquidCrystal_I2C_Hangul11pulseEnableEh>

00001292 <_ZN24LiquidCrystal_I2C_Hangul4sendEhh>:
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	8c 01       	movw	r16, r24
    129c:	c6 2f       	mov	r28, r22
    129e:	d4 2f       	mov	r29, r20
    12a0:	60 7f       	andi	r22, 0xF0	; 240
    12a2:	64 2b       	or	r22, r20
    12a4:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN24LiquidCrystal_I2C_Hangul10write4bitsEh>
    12a8:	80 e1       	ldi	r24, 0x10	; 16
    12aa:	c8 9f       	mul	r28, r24
    12ac:	b0 01       	movw	r22, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	6d 2b       	or	r22, r29
    12b2:	c8 01       	movw	r24, r16
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <_ZN24LiquidCrystal_I2C_Hangul10write4bitsEh>

000012c0 <_ZN24LiquidCrystal_I2C_Hangul7commandEh>:
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	0c 94 49 09 	jmp	0x1292	; 0x1292 <_ZN24LiquidCrystal_I2C_Hangul4sendEhh>

000012c6 <_ZN24LiquidCrystal_I2C_Hangul5clearEv>:
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_ZN24LiquidCrystal_I2C_Hangul7commandEh>
    12cc:	80 ed       	ldi	r24, 0xD0	; 208
    12ce:	97 e0       	ldi	r25, 0x07	; 7
    12d0:	0c 94 ba 03 	jmp	0x774	; 0x774 <delayMicroseconds>

000012d4 <_ZN24LiquidCrystal_I2C_Hangul4homeEv>:
    12d4:	62 e0       	ldi	r22, 0x02	; 2
    12d6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_ZN24LiquidCrystal_I2C_Hangul7commandEh>
    12da:	80 ed       	ldi	r24, 0xD0	; 208
    12dc:	97 e0       	ldi	r25, 0x07	; 7
    12de:	0c 94 ba 03 	jmp	0x774	; 0x774 <delayMicroseconds>

000012e2 <_ZN24LiquidCrystal_I2C_Hangul9setCursorEhh>:
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	28 97       	sbiw	r28, 0x08	; 8
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	9c 01       	movw	r18, r24
    12f8:	88 e0       	ldi	r24, 0x08	; 8
    12fa:	e1 e1       	ldi	r30, 0x11	; 17
    12fc:	f2 e0       	ldi	r31, 0x02	; 2
    12fe:	de 01       	movw	r26, r28
    1300:	11 96       	adiw	r26, 0x01	; 1
    1302:	01 90       	ld	r0, Z+
    1304:	0d 92       	st	X+, r0
    1306:	8a 95       	dec	r24
    1308:	e1 f7       	brne	.-8      	; 0x1302 <_ZN24LiquidCrystal_I2C_Hangul9setCursorEhh+0x20>
    130a:	f9 01       	movw	r30, r18
    130c:	80 85       	ldd	r24, Z+8	; 0x08
    130e:	84 17       	cp	r24, r20
    1310:	10 f4       	brcc	.+4      	; 0x1316 <_ZN24LiquidCrystal_I2C_Hangul9setCursorEhh+0x34>
    1312:	4f ef       	ldi	r20, 0xFF	; 255
    1314:	48 0f       	add	r20, r24
    1316:	fe 01       	movw	r30, r28
    1318:	31 96       	adiw	r30, 0x01	; 1
    131a:	e4 0f       	add	r30, r20
    131c:	f1 1d       	adc	r31, r1
    131e:	e4 0f       	add	r30, r20
    1320:	f1 1d       	adc	r31, r1
    1322:	90 81       	ld	r25, Z
    1324:	69 0f       	add	r22, r25
    1326:	60 68       	ori	r22, 0x80	; 128
    1328:	c9 01       	movw	r24, r18
    132a:	28 96       	adiw	r28, 0x08	; 8
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <_ZN24LiquidCrystal_I2C_Hangul7commandEh>

0000133e <_ZN24LiquidCrystal_I2C_Hangul7displayEv>:
    133e:	fc 01       	movw	r30, r24
    1340:	66 81       	ldd	r22, Z+6	; 0x06
    1342:	26 2f       	mov	r18, r22
    1344:	24 60       	ori	r18, 0x04	; 4
    1346:	26 83       	std	Z+6, r18	; 0x06
    1348:	6c 60       	ori	r22, 0x0C	; 12
    134a:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <_ZN24LiquidCrystal_I2C_Hangul7commandEh>

0000134e <_ZN24LiquidCrystal_I2C_Hangul5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C_Hangul::write(uint8_t value) {
	send(value, Rs);
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN24LiquidCrystal_I2C_Hangul4sendEhh>
	return 1;
}
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	08 95       	ret

0000135a <_ZN24LiquidCrystal_I2C_Hangul5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C_Hangul::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	ec 01       	movw	r28, r24
	if (lines > 1) {
    1360:	42 30       	cpi	r20, 0x02	; 2
    1362:	18 f0       	brcs	.+6      	; 0x136a <_ZN24LiquidCrystal_I2C_Hangul5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	88 60       	ori	r24, 0x08	; 8
    1368:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    136a:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    136c:	22 23       	and	r18, r18
    136e:	29 f0       	breq	.+10     	; 0x137a <_ZN24LiquidCrystal_I2C_Hangul5beginEhhh+0x20>
    1370:	41 30       	cpi	r20, 0x01	; 1
    1372:	19 f4       	brne	.+6      	; 0x137a <_ZN24LiquidCrystal_I2C_Hangul5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	84 60       	ori	r24, 0x04	; 4
    1378:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    137a:	62 e3       	ldi	r22, 0x32	; 50
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 7e 03 	call	0x6fc	; 0x6fc <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    1386:	6b 85       	ldd	r22, Y+11	; 0x0b
    1388:	ce 01       	movw	r24, r28
    138a:	0e 94 06 09 	call	0x120c	; 0x120c <_ZN24LiquidCrystal_I2C_Hangul13expanderWriteEh>
	delay(1000);
    138e:	68 ee       	ldi	r22, 0xE8	; 232
    1390:	73 e0       	ldi	r23, 0x03	; 3
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 7e 03 	call	0x6fc	; 0x6fc <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    139a:	60 e3       	ldi	r22, 0x30	; 48
    139c:	ce 01       	movw	r24, r28
    139e:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN24LiquidCrystal_I2C_Hangul10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    13a2:	84 e9       	ldi	r24, 0x94	; 148
    13a4:	91 e1       	ldi	r25, 0x11	; 17
    13a6:	0e 94 ba 03 	call	0x774	; 0x774 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    13aa:	60 e3       	ldi	r22, 0x30	; 48
    13ac:	ce 01       	movw	r24, r28
    13ae:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN24LiquidCrystal_I2C_Hangul10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    13b2:	84 e9       	ldi	r24, 0x94	; 148
    13b4:	91 e1       	ldi	r25, 0x11	; 17
    13b6:	0e 94 ba 03 	call	0x774	; 0x774 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    13ba:	60 e3       	ldi	r22, 0x30	; 48
    13bc:	ce 01       	movw	r24, r28
    13be:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN24LiquidCrystal_I2C_Hangul10write4bitsEh>
   delayMicroseconds(150);
    13c2:	86 e9       	ldi	r24, 0x96	; 150
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 ba 03 	call	0x774	; 0x774 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    13ca:	60 e2       	ldi	r22, 0x20	; 32
    13cc:	ce 01       	movw	r24, r28
    13ce:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN24LiquidCrystal_I2C_Hangul10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    13d2:	6d 81       	ldd	r22, Y+5	; 0x05
    13d4:	60 62       	ori	r22, 0x20	; 32
    13d6:	ce 01       	movw	r24, r28
    13d8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_ZN24LiquidCrystal_I2C_Hangul7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    13dc:	84 e0       	ldi	r24, 0x04	; 4
    13de:	8e 83       	std	Y+6, r24	; 0x06
	display();
    13e0:	ce 01       	movw	r24, r28
    13e2:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN24LiquidCrystal_I2C_Hangul7displayEv>
	
	// clear it off
	clear();
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN24LiquidCrystal_I2C_Hangul5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    13f0:	66 e0       	ldi	r22, 0x06	; 6
    13f2:	ce 01       	movw	r24, r28
    13f4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_ZN24LiquidCrystal_I2C_Hangul7commandEh>
	
	home();
    13f8:	ce 01       	movw	r24, r28
  
}
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    13fe:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <_ZN24LiquidCrystal_I2C_Hangul4homeEv>

00001402 <_ZN24LiquidCrystal_I2C_Hangul9init_privEv>:
void LiquidCrystal_I2C_Hangul::init(){
	init_priv();
}

void LiquidCrystal_I2C_Hangul::init_priv()
{
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
	Wire.begin();
    1408:	8e e9       	ldi	r24, 0x9E	; 158
    140a:	95 e0       	ldi	r25, 0x05	; 5
    140c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    1410:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	4a 85       	ldd	r20, Y+10	; 0x0a
    1416:	69 85       	ldd	r22, Y+9	; 0x09
    1418:	ce 01       	movw	r24, r28
}
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28

void LiquidCrystal_I2C_Hangul::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    141e:	0c 94 ad 09 	jmp	0x135a	; 0x135a <_ZN24LiquidCrystal_I2C_Hangul5beginEhhh>

00001422 <_ZN24LiquidCrystal_I2C_Hangul4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C_Hangul::init(){
	init_priv();
    1422:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <_ZN24LiquidCrystal_I2C_Hangul9init_privEv>

00001426 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1426:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <_ZN7TwoWire14rxBufferLengthE>
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	20 91 d3 05 	lds	r18, 0x05D3	; 0x8005d3 <_ZN7TwoWire13rxBufferIndexE>
    1430:	82 1b       	sub	r24, r18
    1432:	91 09       	sbc	r25, r1
    1434:	08 95       	ret

00001436 <_ZN7TwoWire4readEv>:
    1436:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <_ZN7TwoWire13rxBufferIndexE>
    143a:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <_ZN7TwoWire14rxBufferLengthE>
    143e:	98 17       	cp	r25, r24
    1440:	50 f4       	brcc	.+20     	; 0x1456 <_ZN7TwoWire4readEv+0x20>
    1442:	e9 2f       	mov	r30, r25
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	ec 52       	subi	r30, 0x2C	; 44
    1448:	fa 4f       	sbci	r31, 0xFA	; 250
    144a:	20 81       	ld	r18, Z
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	9f 5f       	subi	r25, 0xFF	; 255
    1450:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <_ZN7TwoWire13rxBufferIndexE>
    1454:	02 c0       	rjmp	.+4      	; 0x145a <_ZN7TwoWire4readEv+0x24>
    1456:	2f ef       	ldi	r18, 0xFF	; 255
    1458:	3f ef       	ldi	r19, 0xFF	; 255
    145a:	c9 01       	movw	r24, r18
    145c:	08 95       	ret

0000145e <_ZN7TwoWire4peekEv>:
    145e:	e0 91 d3 05 	lds	r30, 0x05D3	; 0x8005d3 <_ZN7TwoWire13rxBufferIndexE>
    1462:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <_ZN7TwoWire14rxBufferLengthE>
    1466:	e8 17       	cp	r30, r24
    1468:	30 f4       	brcc	.+12     	; 0x1476 <_ZN7TwoWire4peekEv+0x18>
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	ec 52       	subi	r30, 0x2C	; 44
    146e:	fa 4f       	sbci	r31, 0xFA	; 250
    1470:	80 81       	ld	r24, Z
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	08 95       	ret
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	9f ef       	ldi	r25, 0xFF	; 255
    147a:	08 95       	ret

0000147c <_ZN7TwoWire5flushEv>:
    147c:	08 95       	ret

0000147e <_ZN7TwoWire16onReceiveServiceEPhi>:
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	ec 01       	movw	r28, r24
    1484:	e0 91 aa 05 	lds	r30, 0x05AA	; 0x8005aa <_ZN7TwoWire14user_onReceiveE>
    1488:	f0 91 ab 05 	lds	r31, 0x05AB	; 0x8005ab <_ZN7TwoWire14user_onReceiveE+0x1>
    148c:	30 97       	sbiw	r30, 0x00	; 0
    148e:	f1 f0       	breq	.+60     	; 0x14cc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1490:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <_ZN7TwoWire13rxBufferIndexE>
    1494:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <_ZN7TwoWire14rxBufferLengthE>
    1498:	98 17       	cp	r25, r24
    149a:	c0 f0       	brcs	.+48     	; 0x14cc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	29 2f       	mov	r18, r25
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	26 17       	cp	r18, r22
    14a4:	37 07       	cpc	r19, r23
    14a6:	54 f4       	brge	.+20     	; 0x14bc <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    14a8:	de 01       	movw	r26, r28
    14aa:	a2 0f       	add	r26, r18
    14ac:	b3 1f       	adc	r27, r19
    14ae:	4c 91       	ld	r20, X
    14b0:	d9 01       	movw	r26, r18
    14b2:	ac 52       	subi	r26, 0x2C	; 44
    14b4:	ba 4f       	sbci	r27, 0xFA	; 250
    14b6:	4c 93       	st	X, r20
    14b8:	9f 5f       	subi	r25, 0xFF	; 255
    14ba:	f1 cf       	rjmp	.-30     	; 0x149e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    14bc:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <_ZN7TwoWire13rxBufferIndexE>
    14c0:	60 93 d2 05 	sts	0x05D2, r22	; 0x8005d2 <_ZN7TwoWire14rxBufferLengthE>
    14c4:	cb 01       	movw	r24, r22
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	09 94       	ijmp
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	08 95       	ret

000014d2 <_ZN7TwoWire16onRequestServiceEv>:
    14d2:	e0 91 ac 05 	lds	r30, 0x05AC	; 0x8005ac <_ZN7TwoWire14user_onRequestE>
    14d6:	f0 91 ad 05 	lds	r31, 0x05AD	; 0x8005ad <_ZN7TwoWire14user_onRequestE+0x1>
    14da:	30 97       	sbiw	r30, 0x00	; 0
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    14de:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <_ZN7TwoWire13txBufferIndexE>
    14e2:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <_ZN7TwoWire14txBufferLengthE>
    14e6:	09 94       	ijmp
    14e8:	08 95       	ret

000014ea <_ZN7TwoWire5writeEPKhj>:
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	7c 01       	movw	r14, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	8a 01       	movw	r16, r20
    1500:	20 91 ae 05 	lds	r18, 0x05AE	; 0x8005ae <_ZN7TwoWire12transmittingE>
    1504:	22 23       	and	r18, r18
    1506:	89 f0       	breq	.+34     	; 0x152a <_ZN7TwoWire5writeEPKhj+0x40>
    1508:	eb 01       	movw	r28, r22
    150a:	6b 01       	movw	r12, r22
    150c:	c4 0e       	add	r12, r20
    150e:	d5 1e       	adc	r13, r21
    1510:	cc 15       	cp	r28, r12
    1512:	dd 05       	cpc	r29, r13
    1514:	69 f0       	breq	.+26     	; 0x1530 <_ZN7TwoWire5writeEPKhj+0x46>
    1516:	69 91       	ld	r22, Y+
    1518:	d7 01       	movw	r26, r14
    151a:	ed 91       	ld	r30, X+
    151c:	fc 91       	ld	r31, X
    151e:	01 90       	ld	r0, Z+
    1520:	f0 81       	ld	r31, Z
    1522:	e0 2d       	mov	r30, r0
    1524:	c7 01       	movw	r24, r14
    1526:	09 95       	icall
    1528:	f3 cf       	rjmp	.-26     	; 0x1510 <_ZN7TwoWire5writeEPKhj+0x26>
    152a:	64 2f       	mov	r22, r20
    152c:	0e 94 43 0b 	call	0x1686	; 0x1686 <twi_transmit>
    1530:	c8 01       	movw	r24, r16
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	df 90       	pop	r13
    1540:	cf 90       	pop	r12
    1542:	08 95       	ret

00001544 <_ZN7TwoWire5writeEh>:
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	1f 92       	push	r1
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	69 83       	std	Y+1, r22	; 0x01
    1550:	20 91 ae 05 	lds	r18, 0x05AE	; 0x8005ae <_ZN7TwoWire12transmittingE>
    1554:	22 23       	and	r18, r18
    1556:	d1 f0       	breq	.+52     	; 0x158c <_ZN7TwoWire5writeEh+0x48>
    1558:	20 91 af 05 	lds	r18, 0x05AF	; 0x8005af <_ZN7TwoWire14txBufferLengthE>
    155c:	20 32       	cpi	r18, 0x20	; 32
    155e:	40 f0       	brcs	.+16     	; 0x1570 <_ZN7TwoWire5writeEh+0x2c>
    1560:	21 e0       	ldi	r18, 0x01	; 1
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	fc 01       	movw	r30, r24
    1566:	33 83       	std	Z+3, r19	; 0x03
    1568:	22 83       	std	Z+2, r18	; 0x02
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	15 c0       	rjmp	.+42     	; 0x159a <_ZN7TwoWire5writeEh+0x56>
    1570:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <_ZN7TwoWire13txBufferIndexE>
    1574:	e8 2f       	mov	r30, r24
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	ef 54       	subi	r30, 0x4F	; 79
    157a:	fa 4f       	sbci	r31, 0xFA	; 250
    157c:	99 81       	ldd	r25, Y+1	; 0x01
    157e:	90 83       	st	Z, r25
    1580:	8f 5f       	subi	r24, 0xFF	; 255
    1582:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <_ZN7TwoWire13txBufferIndexE>
    1586:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <_ZN7TwoWire14txBufferLengthE>
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <_ZN7TwoWire5writeEh+0x52>
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	ce 01       	movw	r24, r28
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	0e 94 43 0b 	call	0x1686	; 0x1686 <twi_transmit>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0f 90       	pop	r0
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	08 95       	ret

000015a2 <_ZN7TwoWireC1Ev>:
    15a2:	fc 01       	movw	r30, r24
    15a4:	13 82       	std	Z+3, r1	; 0x03
    15a6:	12 82       	std	Z+2, r1	; 0x02
    15a8:	88 ee       	ldi	r24, 0xE8	; 232
    15aa:	93 e0       	ldi	r25, 0x03	; 3
    15ac:	a0 e0       	ldi	r26, 0x00	; 0
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	84 83       	std	Z+4, r24	; 0x04
    15b2:	95 83       	std	Z+5, r25	; 0x05
    15b4:	a6 83       	std	Z+6, r26	; 0x06
    15b6:	b7 83       	std	Z+7, r27	; 0x07
    15b8:	8e e7       	ldi	r24, 0x7E	; 126
    15ba:	92 e0       	ldi	r25, 0x02	; 2
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	80 83       	st	Z, r24
    15c0:	08 95       	ret

000015c2 <_ZN7TwoWire5beginEv>:
    15c2:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <_ZN7TwoWire13rxBufferIndexE>
    15c6:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <_ZN7TwoWire14rxBufferLengthE>
    15ca:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <_ZN7TwoWire13txBufferIndexE>
    15ce:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <_ZN7TwoWire14txBufferLengthE>
    15d2:	0e 94 18 0b 	call	0x1630	; 0x1630 <twi_init>
    15d6:	89 e6       	ldi	r24, 0x69	; 105
    15d8:	9a e0       	ldi	r25, 0x0A	; 10
    15da:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <twi_attachSlaveTxEvent>
    15de:	8f e3       	ldi	r24, 0x3F	; 63
    15e0:	9a e0       	ldi	r25, 0x0A	; 10
    15e2:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <twi_attachSlaveRxEvent>

000015e6 <_ZN7TwoWire17beginTransmissionEh>:
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <_ZN7TwoWire12transmittingE>
    15ec:	60 93 d1 05 	sts	0x05D1, r22	; 0x8005d1 <_ZN7TwoWire9txAddressE>
    15f0:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <_ZN7TwoWire13txBufferIndexE>
    15f4:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <_ZN7TwoWire14txBufferLengthE>
    15f8:	08 95       	ret

000015fa <_ZN7TwoWire15endTransmissionEh>:
    15fa:	0f 93       	push	r16
    15fc:	06 2f       	mov	r16, r22
    15fe:	21 e0       	ldi	r18, 0x01	; 1
    1600:	40 91 af 05 	lds	r20, 0x05AF	; 0x8005af <_ZN7TwoWire14txBufferLengthE>
    1604:	61 eb       	ldi	r22, 0xB1	; 177
    1606:	75 e0       	ldi	r23, 0x05	; 5
    1608:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <_ZN7TwoWire9txAddressE>
    160c:	0e 94 91 0b 	call	0x1722	; 0x1722 <twi_writeTo>
    1610:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <_ZN7TwoWire13txBufferIndexE>
    1614:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <_ZN7TwoWire14txBufferLengthE>
    1618:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <_ZN7TwoWire12transmittingE>
    161c:	0f 91       	pop	r16
    161e:	08 95       	ret

00001620 <_ZN7TwoWire15endTransmissionEv>:
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <_ZN7TwoWire15endTransmissionEh>

00001626 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1626:	8e e9       	ldi	r24, 0x9E	; 158
    1628:	95 e0       	ldi	r25, 0x05	; 5
    162a:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <_ZN7TwoWireC1Ev>

0000162e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    162e:	08 95       	ret

00001630 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    1630:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <twi_state>
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <twi_sendStop>
    163a:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <twi_inRepStart>
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	82 e1       	ldi	r24, 0x12	; 18
    1642:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <digitalWrite>
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	83 e1       	ldi	r24, 0x13	; 19
    164a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <digitalWrite>
    164e:	e9 eb       	ldi	r30, 0xB9	; 185
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8e 7f       	andi	r24, 0xFE	; 254
    1656:	80 83       	st	Z, r24
    1658:	80 81       	ld	r24, Z
    165a:	8d 7f       	andi	r24, 0xFD	; 253
    165c:	80 83       	st	Z, r24
    165e:	88 e4       	ldi	r24, 0x48	; 72
    1660:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1664:	85 e4       	ldi	r24, 0x45	; 69
    1666:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    166a:	08 95       	ret

0000166c <twi_disable>:
    166c:	ec eb       	ldi	r30, 0xBC	; 188
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	8a 7b       	andi	r24, 0xBA	; 186
    1674:	80 83       	st	Z, r24
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	82 e1       	ldi	r24, 0x12	; 18
    167a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <digitalWrite>
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	83 e1       	ldi	r24, 0x13	; 19
    1682:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <digitalWrite>

00001686 <twi_transmit>:
    1686:	40 91 16 06 	lds	r20, 0x0616	; 0x800616 <twi_txBufferLength>
    168a:	26 2f       	mov	r18, r22
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	24 0f       	add	r18, r20
    1690:	31 1d       	adc	r19, r1
    1692:	21 32       	cpi	r18, 0x21	; 33
    1694:	31 05       	cpc	r19, r1
    1696:	dc f4       	brge	.+54     	; 0x16ce <twi_transmit+0x48>
    1698:	20 91 67 06 	lds	r18, 0x0667	; 0x800667 <twi_state>
    169c:	24 30       	cpi	r18, 0x04	; 4
    169e:	c9 f4       	brne	.+50     	; 0x16d2 <twi_transmit+0x4c>
    16a0:	fc 01       	movw	r30, r24
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	86 17       	cp	r24, r22
    16a8:	58 f4       	brcc	.+22     	; 0x16c0 <twi_transmit+0x3a>
    16aa:	30 91 16 06 	lds	r19, 0x0616	; 0x800616 <twi_txBufferLength>
    16ae:	21 91       	ld	r18, Z+
    16b0:	dc 01       	movw	r26, r24
    16b2:	a8 5e       	subi	r26, 0xE8	; 232
    16b4:	b9 4f       	sbci	r27, 0xF9	; 249
    16b6:	a3 0f       	add	r26, r19
    16b8:	b1 1d       	adc	r27, r1
    16ba:	2c 93       	st	X, r18
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	f3 cf       	rjmp	.-26     	; 0x16a6 <twi_transmit+0x20>
    16c0:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <twi_txBufferLength>
    16c4:	68 0f       	add	r22, r24
    16c6:	60 93 16 06 	sts	0x0616, r22	; 0x800616 <twi_txBufferLength>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	08 95       	ret
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	08 95       	ret
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	08 95       	ret

000016d6 <twi_attachSlaveRxEvent>:
    16d6:	90 93 5b 06 	sts	0x065B, r25	; 0x80065b <twi_onSlaveReceive+0x1>
    16da:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <twi_onSlaveReceive>
    16de:	08 95       	ret

000016e0 <twi_attachSlaveTxEvent>:
    16e0:	90 93 5d 06 	sts	0x065D, r25	; 0x80065d <twi_onSlaveTransmit+0x1>
    16e4:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <twi_onSlaveTransmit>
    16e8:	08 95       	ret

000016ea <twi_releaseBus>:
    16ea:	85 ec       	ldi	r24, 0xC5	; 197
    16ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    16f0:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <twi_state>
    16f4:	08 95       	ret

000016f6 <twi_handleTimeout>:
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	90 93 5f 06 	sts	0x065F, r25	; 0x80065f <twi_timed_out_flag>
    1700:	88 23       	and	r24, r24
    1702:	61 f0       	breq	.+24     	; 0x171c <twi_handleTimeout+0x26>
    1704:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1708:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    170c:	0e 94 36 0b 	call	0x166c	; 0x166c <twi_disable>
    1710:	0e 94 18 0b 	call	0x1630	; 0x1630 <twi_init>
    1714:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    1718:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <twi_writeTo>:
    1722:	4f 92       	push	r4
    1724:	5f 92       	push	r5
    1726:	6f 92       	push	r6
    1728:	7f 92       	push	r7
    172a:	8f 92       	push	r8
    172c:	9f 92       	push	r9
    172e:	af 92       	push	r10
    1730:	bf 92       	push	r11
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	41 32       	cpi	r20, 0x21	; 33
    1744:	08 f0       	brcs	.+2      	; 0x1748 <twi_writeTo+0x26>
    1746:	c6 c0       	rjmp	.+396    	; 0x18d4 <twi_writeTo+0x1b2>
    1748:	12 2f       	mov	r17, r18
    174a:	f4 2e       	mov	r15, r20
    174c:	d7 2e       	mov	r13, r23
    174e:	e6 2e       	mov	r14, r22
    1750:	d8 2f       	mov	r29, r24
    1752:	0e 94 59 03 	call	0x6b2	; 0x6b2 <micros>
    1756:	4b 01       	movw	r8, r22
    1758:	5c 01       	movw	r10, r24
    175a:	c0 91 67 06 	lds	r28, 0x0667	; 0x800667 <twi_state>
    175e:	cc 23       	and	r28, r28
    1760:	11 f1       	breq	.+68     	; 0x17a6 <twi_writeTo+0x84>
    1762:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <twi_timeout_us>
    1766:	90 91 61 06 	lds	r25, 0x0661	; 0x800661 <twi_timeout_us+0x1>
    176a:	a0 91 62 06 	lds	r26, 0x0662	; 0x800662 <twi_timeout_us+0x2>
    176e:	b0 91 63 06 	lds	r27, 0x0663	; 0x800663 <twi_timeout_us+0x3>
    1772:	89 2b       	or	r24, r25
    1774:	8a 2b       	or	r24, r26
    1776:	8b 2b       	or	r24, r27
    1778:	81 f3       	breq	.-32     	; 0x175a <twi_writeTo+0x38>
    177a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <micros>
    177e:	40 90 60 06 	lds	r4, 0x0660	; 0x800660 <twi_timeout_us>
    1782:	50 90 61 06 	lds	r5, 0x0661	; 0x800661 <twi_timeout_us+0x1>
    1786:	60 90 62 06 	lds	r6, 0x0662	; 0x800662 <twi_timeout_us+0x2>
    178a:	70 90 63 06 	lds	r7, 0x0663	; 0x800663 <twi_timeout_us+0x3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	88 19       	sub	r24, r8
    1794:	99 09       	sbc	r25, r9
    1796:	aa 09       	sbc	r26, r10
    1798:	bb 09       	sbc	r27, r11
    179a:	48 16       	cp	r4, r24
    179c:	59 06       	cpc	r5, r25
    179e:	6a 06       	cpc	r6, r26
    17a0:	7b 06       	cpc	r7, r27
    17a2:	d8 f6       	brcc	.-74     	; 0x175a <twi_writeTo+0x38>
    17a4:	83 c0       	rjmp	.+262    	; 0x18ac <twi_writeTo+0x18a>
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <twi_state>
    17ac:	00 93 65 06 	sts	0x0665, r16	; 0x800665 <twi_sendStop>
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
    17b2:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <twi_error>
    17b6:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <twi_masterBufferIndex>
    17ba:	f0 92 38 06 	sts	0x0638, r15	; 0x800638 <twi_masterBufferLength>
    17be:	9e 2d       	mov	r25, r14
    17c0:	aa e3       	ldi	r26, 0x3A	; 58
    17c2:	b6 e0       	ldi	r27, 0x06	; 6
    17c4:	ee 2d       	mov	r30, r14
    17c6:	fd 2d       	mov	r31, r13
    17c8:	8e 2f       	mov	r24, r30
    17ca:	89 1b       	sub	r24, r25
    17cc:	8f 15       	cp	r24, r15
    17ce:	18 f4       	brcc	.+6      	; 0x17d6 <twi_writeTo+0xb4>
    17d0:	81 91       	ld	r24, Z+
    17d2:	8d 93       	st	X+, r24
    17d4:	f9 cf       	rjmp	.-14     	; 0x17c8 <twi_writeTo+0xa6>
    17d6:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <twi_slarw>
    17da:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <twi_slarw>
    17de:	dd 0f       	add	r29, r29
    17e0:	d9 2b       	or	r29, r25
    17e2:	d0 93 66 06 	sts	0x0666, r29	; 0x800666 <twi_slarw>
    17e6:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <twi_inRepStart>
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	89 f5       	brne	.+98     	; 0x1850 <twi_writeTo+0x12e>
    17ee:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <twi_inRepStart>
    17f2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <micros>
    17f6:	6b 01       	movw	r12, r22
    17f8:	7c 01       	movw	r14, r24
    17fa:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <twi_slarw>
    17fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1802:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <twi_timeout_us>
    1806:	90 91 61 06 	lds	r25, 0x0661	; 0x800661 <twi_timeout_us+0x1>
    180a:	a0 91 62 06 	lds	r26, 0x0662	; 0x800662 <twi_timeout_us+0x2>
    180e:	b0 91 63 06 	lds	r27, 0x0663	; 0x800663 <twi_timeout_us+0x3>
    1812:	89 2b       	or	r24, r25
    1814:	8a 2b       	or	r24, r26
    1816:	8b 2b       	or	r24, r27
    1818:	a9 f0       	breq	.+42     	; 0x1844 <twi_writeTo+0x122>
    181a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <micros>
    181e:	80 90 60 06 	lds	r8, 0x0660	; 0x800660 <twi_timeout_us>
    1822:	90 90 61 06 	lds	r9, 0x0661	; 0x800661 <twi_timeout_us+0x1>
    1826:	a0 90 62 06 	lds	r10, 0x0662	; 0x800662 <twi_timeout_us+0x2>
    182a:	b0 90 63 06 	lds	r11, 0x0663	; 0x800663 <twi_timeout_us+0x3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	8c 19       	sub	r24, r12
    1834:	9d 09       	sbc	r25, r13
    1836:	ae 09       	sbc	r26, r14
    1838:	bf 09       	sbc	r27, r15
    183a:	88 16       	cp	r8, r24
    183c:	99 06       	cpc	r9, r25
    183e:	aa 06       	cpc	r10, r26
    1840:	bb 06       	cpc	r11, r27
    1842:	a0 f1       	brcs	.+104    	; 0x18ac <twi_writeTo+0x18a>
    1844:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1848:	83 fd       	sbrc	r24, 3
    184a:	d7 cf       	rjmp	.-82     	; 0x17fa <twi_writeTo+0xd8>
    184c:	85 ec       	ldi	r24, 0xC5	; 197
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <twi_writeTo+0x130>
    1850:	85 ee       	ldi	r24, 0xE5	; 229
    1852:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1856:	0e 94 59 03 	call	0x6b2	; 0x6b2 <micros>
    185a:	6b 01       	movw	r12, r22
    185c:	7c 01       	movw	r14, r24
    185e:	11 23       	and	r17, r17
    1860:	59 f1       	breq	.+86     	; 0x18b8 <twi_writeTo+0x196>
    1862:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <twi_state>
    1866:	82 30       	cpi	r24, 0x02	; 2
    1868:	39 f5       	brne	.+78     	; 0x18b8 <twi_writeTo+0x196>
    186a:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <twi_timeout_us>
    186e:	90 91 61 06 	lds	r25, 0x0661	; 0x800661 <twi_timeout_us+0x1>
    1872:	a0 91 62 06 	lds	r26, 0x0662	; 0x800662 <twi_timeout_us+0x2>
    1876:	b0 91 63 06 	lds	r27, 0x0663	; 0x800663 <twi_timeout_us+0x3>
    187a:	89 2b       	or	r24, r25
    187c:	8a 2b       	or	r24, r26
    187e:	8b 2b       	or	r24, r27
    1880:	71 f3       	breq	.-36     	; 0x185e <twi_writeTo+0x13c>
    1882:	0e 94 59 03 	call	0x6b2	; 0x6b2 <micros>
    1886:	80 90 60 06 	lds	r8, 0x0660	; 0x800660 <twi_timeout_us>
    188a:	90 90 61 06 	lds	r9, 0x0661	; 0x800661 <twi_timeout_us+0x1>
    188e:	a0 90 62 06 	lds	r10, 0x0662	; 0x800662 <twi_timeout_us+0x2>
    1892:	b0 90 63 06 	lds	r11, 0x0663	; 0x800663 <twi_timeout_us+0x3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	8c 19       	sub	r24, r12
    189c:	9d 09       	sbc	r25, r13
    189e:	ae 09       	sbc	r26, r14
    18a0:	bf 09       	sbc	r27, r15
    18a2:	88 16       	cp	r8, r24
    18a4:	99 06       	cpc	r9, r25
    18a6:	aa 06       	cpc	r10, r26
    18a8:	bb 06       	cpc	r11, r27
    18aa:	c8 f6       	brcc	.-78     	; 0x185e <twi_writeTo+0x13c>
    18ac:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <twi_do_reset_on_timeout>
    18b0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <twi_handleTimeout>
    18b4:	c5 e0       	ldi	r28, 0x05	; 5
    18b6:	13 c0       	rjmp	.+38     	; 0x18de <twi_writeTo+0x1bc>
    18b8:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <twi_error>
    18bc:	8f 3f       	cpi	r24, 0xFF	; 255
    18be:	79 f0       	breq	.+30     	; 0x18de <twi_writeTo+0x1bc>
    18c0:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <twi_error>
    18c4:	80 32       	cpi	r24, 0x20	; 32
    18c6:	41 f0       	breq	.+16     	; 0x18d8 <twi_writeTo+0x1b6>
    18c8:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <twi_error>
    18cc:	80 33       	cpi	r24, 0x30	; 48
    18ce:	31 f0       	breq	.+12     	; 0x18dc <twi_writeTo+0x1ba>
    18d0:	c4 e0       	ldi	r28, 0x04	; 4
    18d2:	05 c0       	rjmp	.+10     	; 0x18de <twi_writeTo+0x1bc>
    18d4:	c1 e0       	ldi	r28, 0x01	; 1
    18d6:	03 c0       	rjmp	.+6      	; 0x18de <twi_writeTo+0x1bc>
    18d8:	c2 e0       	ldi	r28, 0x02	; 2
    18da:	01 c0       	rjmp	.+2      	; 0x18de <twi_writeTo+0x1bc>
    18dc:	c3 e0       	ldi	r28, 0x03	; 3
    18de:	8c 2f       	mov	r24, r28
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	bf 90       	pop	r11
    18f2:	af 90       	pop	r10
    18f4:	9f 90       	pop	r9
    18f6:	8f 90       	pop	r8
    18f8:	7f 90       	pop	r7
    18fa:	6f 90       	pop	r6
    18fc:	5f 90       	pop	r5
    18fe:	4f 90       	pop	r4
    1900:	08 95       	ret

00001902 <twi_stop>:
    1902:	85 ed       	ldi	r24, 0xD5	; 213
    1904:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1908:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <twi_timeout_us>
    190c:	90 91 61 06 	lds	r25, 0x0661	; 0x800661 <twi_timeout_us+0x1>
    1910:	a0 91 62 06 	lds	r26, 0x0662	; 0x800662 <twi_timeout_us+0x2>
    1914:	b0 91 63 06 	lds	r27, 0x0663	; 0x800663 <twi_timeout_us+0x3>
    1918:	07 96       	adiw	r24, 0x07	; 7
    191a:	a1 1d       	adc	r26, r1
    191c:	b1 1d       	adc	r27, r1
    191e:	23 e0       	ldi	r18, 0x03	; 3
    1920:	b6 95       	lsr	r27
    1922:	a7 95       	ror	r26
    1924:	97 95       	ror	r25
    1926:	87 95       	ror	r24
    1928:	2a 95       	dec	r18
    192a:	d1 f7       	brne	.-12     	; 0x1920 <twi_stop+0x1e>
    192c:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1930:	24 ff       	sbrs	r18, 4
    1932:	1c c0       	rjmp	.+56     	; 0x196c <twi_stop+0x6a>
    1934:	40 91 60 06 	lds	r20, 0x0660	; 0x800660 <twi_timeout_us>
    1938:	50 91 61 06 	lds	r21, 0x0661	; 0x800661 <twi_timeout_us+0x1>
    193c:	60 91 62 06 	lds	r22, 0x0662	; 0x800662 <twi_timeout_us+0x2>
    1940:	70 91 63 06 	lds	r23, 0x0663	; 0x800663 <twi_timeout_us+0x3>
    1944:	45 2b       	or	r20, r21
    1946:	46 2b       	or	r20, r22
    1948:	47 2b       	or	r20, r23
    194a:	81 f3       	breq	.-32     	; 0x192c <twi_stop+0x2a>
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	a1 05       	cpc	r26, r1
    1950:	b1 05       	cpc	r27, r1
    1952:	41 f0       	breq	.+16     	; 0x1964 <twi_stop+0x62>
    1954:	2a e2       	ldi	r18, 0x2A	; 42
    1956:	2a 95       	dec	r18
    1958:	f1 f7       	brne	.-4      	; 0x1956 <twi_stop+0x54>
    195a:	00 c0       	rjmp	.+0      	; 0x195c <twi_stop+0x5a>
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	a1 09       	sbc	r26, r1
    1960:	b1 09       	sbc	r27, r1
    1962:	e4 cf       	rjmp	.-56     	; 0x192c <twi_stop+0x2a>
    1964:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <twi_do_reset_on_timeout>
    1968:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <twi_handleTimeout>
    196c:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <twi_state>
    1970:	08 95       	ret

00001972 <__vector_24>:

ISR(TWI_vect)
{
    1972:	1f 92       	push	r1
    1974:	0f 92       	push	r0
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	11 24       	eor	r1, r1
    197c:	2f 93       	push	r18
    197e:	3f 93       	push	r19
    1980:	4f 93       	push	r20
    1982:	5f 93       	push	r21
    1984:	6f 93       	push	r22
    1986:	7f 93       	push	r23
    1988:	8f 93       	push	r24
    198a:	9f 93       	push	r25
    198c:	af 93       	push	r26
    198e:	bf 93       	push	r27
    1990:	ef 93       	push	r30
    1992:	ff 93       	push	r31
  switch(TW_STATUS){
    1994:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1998:	88 7f       	andi	r24, 0xF8	; 248
    199a:	80 36       	cpi	r24, 0x60	; 96
    199c:	09 f4       	brne	.+2      	; 0x19a0 <__vector_24+0x2e>
    199e:	9e c0       	rjmp	.+316    	; 0x1adc <__vector_24+0x16a>
    19a0:	78 f5       	brcc	.+94     	; 0x1a00 <__vector_24+0x8e>
    19a2:	88 32       	cpi	r24, 0x28	; 40
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <__vector_24+0x36>
    19a6:	5d c0       	rjmp	.+186    	; 0x1a62 <__vector_24+0xf0>
    19a8:	90 f4       	brcc	.+36     	; 0x19ce <__vector_24+0x5c>
    19aa:	80 31       	cpi	r24, 0x10	; 16
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <__vector_24+0x3e>
    19ae:	56 c0       	rjmp	.+172    	; 0x1a5c <__vector_24+0xea>
    19b0:	38 f4       	brcc	.+14     	; 0x19c0 <__vector_24+0x4e>
    19b2:	88 23       	and	r24, r24
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <__vector_24+0x46>
    19b6:	f5 c0       	rjmp	.+490    	; 0x1ba2 <__vector_24+0x230>
    19b8:	88 30       	cpi	r24, 0x08	; 8
    19ba:	09 f4       	brne	.+2      	; 0x19be <__vector_24+0x4c>
    19bc:	4f c0       	rjmp	.+158    	; 0x1a5c <__vector_24+0xea>
    19be:	f5 c0       	rjmp	.+490    	; 0x1baa <__vector_24+0x238>
    19c0:	88 31       	cpi	r24, 0x18	; 24
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <__vector_24+0x54>
    19c4:	4e c0       	rjmp	.+156    	; 0x1a62 <__vector_24+0xf0>
    19c6:	80 32       	cpi	r24, 0x20	; 32
    19c8:	09 f4       	brne	.+2      	; 0x19cc <__vector_24+0x5a>
    19ca:	5f c0       	rjmp	.+190    	; 0x1a8a <__vector_24+0x118>
    19cc:	ee c0       	rjmp	.+476    	; 0x1baa <__vector_24+0x238>
    19ce:	80 34       	cpi	r24, 0x40	; 64
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <__vector_24+0x62>
    19d2:	6a c0       	rjmp	.+212    	; 0x1aa8 <__vector_24+0x136>
    19d4:	58 f4       	brcc	.+22     	; 0x19ec <__vector_24+0x7a>
    19d6:	80 33       	cpi	r24, 0x30	; 48
    19d8:	09 f4       	brne	.+2      	; 0x19dc <__vector_24+0x6a>
    19da:	57 c0       	rjmp	.+174    	; 0x1a8a <__vector_24+0x118>
    19dc:	88 33       	cpi	r24, 0x38	; 56
    19de:	09 f0       	breq	.+2      	; 0x19e2 <__vector_24+0x70>
    19e0:	e4 c0       	rjmp	.+456    	; 0x1baa <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    19e2:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <twi_error>
      twi_releaseBus();
    19e6:	0e 94 75 0b 	call	0x16ea	; 0x16ea <twi_releaseBus>
      break;
    19ea:	df c0       	rjmp	.+446    	; 0x1baa <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    19ec:	80 35       	cpi	r24, 0x50	; 80
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <__vector_24+0x80>
    19f0:	4f c0       	rjmp	.+158    	; 0x1a90 <__vector_24+0x11e>
    19f2:	88 35       	cpi	r24, 0x58	; 88
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <__vector_24+0x86>
    19f6:	5d c0       	rjmp	.+186    	; 0x1ab2 <__vector_24+0x140>
    19f8:	88 34       	cpi	r24, 0x48	; 72
    19fa:	09 f0       	breq	.+2      	; 0x19fe <__vector_24+0x8c>
    19fc:	d6 c0       	rjmp	.+428    	; 0x1baa <__vector_24+0x238>
    19fe:	d3 c0       	rjmp	.+422    	; 0x1ba6 <__vector_24+0x234>
    1a00:	88 39       	cpi	r24, 0x98	; 152
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <__vector_24+0x94>
    1a04:	c4 c0       	rjmp	.+392    	; 0x1b8e <__vector_24+0x21c>
    1a06:	a8 f4       	brcc	.+42     	; 0x1a32 <__vector_24+0xc0>
    1a08:	88 37       	cpi	r24, 0x78	; 120
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <__vector_24+0x9c>
    1a0c:	67 c0       	rjmp	.+206    	; 0x1adc <__vector_24+0x16a>
    1a0e:	38 f4       	brcc	.+14     	; 0x1a1e <__vector_24+0xac>
    1a10:	88 36       	cpi	r24, 0x68	; 104
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <__vector_24+0xa4>
    1a14:	63 c0       	rjmp	.+198    	; 0x1adc <__vector_24+0x16a>
    1a16:	80 37       	cpi	r24, 0x70	; 112
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <__vector_24+0xaa>
    1a1a:	60 c0       	rjmp	.+192    	; 0x1adc <__vector_24+0x16a>
    1a1c:	c6 c0       	rjmp	.+396    	; 0x1baa <__vector_24+0x238>
    1a1e:	88 38       	cpi	r24, 0x88	; 136
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <__vector_24+0xb2>
    1a22:	b5 c0       	rjmp	.+362    	; 0x1b8e <__vector_24+0x21c>
    1a24:	80 39       	cpi	r24, 0x90	; 144
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <__vector_24+0xb8>
    1a28:	5f c0       	rjmp	.+190    	; 0x1ae8 <__vector_24+0x176>
    1a2a:	80 38       	cpi	r24, 0x80	; 128
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <__vector_24+0xbe>
    1a2e:	bd c0       	rjmp	.+378    	; 0x1baa <__vector_24+0x238>
    1a30:	5b c0       	rjmp	.+182    	; 0x1ae8 <__vector_24+0x176>
    1a32:	80 3b       	cpi	r24, 0xB0	; 176
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <__vector_24+0xc6>
    1a36:	83 c0       	rjmp	.+262    	; 0x1b3e <__vector_24+0x1cc>
    1a38:	38 f4       	brcc	.+14     	; 0x1a48 <__vector_24+0xd6>
    1a3a:	80 3a       	cpi	r24, 0xA0	; 160
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <__vector_24+0xce>
    1a3e:	66 c0       	rjmp	.+204    	; 0x1b0c <__vector_24+0x19a>
    1a40:	88 3a       	cpi	r24, 0xA8	; 168
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <__vector_24+0xd4>
    1a44:	7c c0       	rjmp	.+248    	; 0x1b3e <__vector_24+0x1cc>
    1a46:	b1 c0       	rjmp	.+354    	; 0x1baa <__vector_24+0x238>
    1a48:	80 3c       	cpi	r24, 0xC0	; 192
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <__vector_24+0xdc>
    1a4c:	a4 c0       	rjmp	.+328    	; 0x1b96 <__vector_24+0x224>
    1a4e:	88 3c       	cpi	r24, 0xC8	; 200
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <__vector_24+0xe2>
    1a52:	a1 c0       	rjmp	.+322    	; 0x1b96 <__vector_24+0x224>
    1a54:	88 3b       	cpi	r24, 0xB8	; 184
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <__vector_24+0xe8>
    1a58:	87 c0       	rjmp	.+270    	; 0x1b68 <__vector_24+0x1f6>
    1a5a:	a7 c0       	rjmp	.+334    	; 0x1baa <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1a5c:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <twi_slarw>
    1a60:	10 c0       	rjmp	.+32     	; 0x1a82 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1a62:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <twi_masterBufferIndex>
    1a66:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <twi_masterBufferLength>
    1a6a:	98 17       	cp	r25, r24
    1a6c:	70 f5       	brcc	.+92     	; 0x1aca <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1a6e:	e0 91 39 06 	lds	r30, 0x0639	; 0x800639 <twi_masterBufferIndex>
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	8e 0f       	add	r24, r30
    1a76:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <twi_masterBufferIndex>
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	e6 5c       	subi	r30, 0xC6	; 198
    1a7e:	f9 4f       	sbci	r31, 0xF9	; 249
    1a80:	80 81       	ld	r24, Z
    1a82:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1a86:	85 ec       	ldi	r24, 0xC5	; 197
    1a88:	83 c0       	rjmp	.+262    	; 0x1b90 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1a8a:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <twi_error>
    1a8e:	8b c0       	rjmp	.+278    	; 0x1ba6 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1a90:	e0 91 39 06 	lds	r30, 0x0639	; 0x800639 <twi_masterBufferIndex>
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	8e 0f       	add	r24, r30
    1a98:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <twi_masterBufferIndex>
    1a9c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	e6 5c       	subi	r30, 0xC6	; 198
    1aa4:	f9 4f       	sbci	r31, 0xF9	; 249
    1aa6:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1aa8:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <twi_masterBufferIndex>
    1aac:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <twi_masterBufferLength>
    1ab0:	6b c0       	rjmp	.+214    	; 0x1b88 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1ab2:	e0 91 39 06 	lds	r30, 0x0639	; 0x800639 <twi_masterBufferIndex>
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	8e 0f       	add	r24, r30
    1aba:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <twi_masterBufferIndex>
    1abe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	e6 5c       	subi	r30, 0xC6	; 198
    1ac6:	f9 4f       	sbci	r31, 0xF9	; 249
    1ac8:	80 83       	st	Z, r24
      if (twi_sendStop){
    1aca:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <twi_sendStop>
    1ace:	81 11       	cpse	r24, r1
    1ad0:	6a c0       	rjmp	.+212    	; 0x1ba6 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1ad8:	84 ea       	ldi	r24, 0xA4	; 164
    1ada:	5e c0       	rjmp	.+188    	; 0x1b98 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1ae2:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <twi_rxBufferIndex>
    1ae6:	cf cf       	rjmp	.-98     	; 0x1a86 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1ae8:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <twi_rxBufferIndex>
    1aec:	80 32       	cpi	r24, 0x20	; 32
    1aee:	08 f0       	brcs	.+2      	; 0x1af2 <__vector_24+0x180>
    1af0:	4e c0       	rjmp	.+156    	; 0x1b8e <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1af2:	e0 91 f5 05 	lds	r30, 0x05F5	; 0x8005f5 <twi_rxBufferIndex>
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	8e 0f       	add	r24, r30
    1afa:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <twi_rxBufferIndex>
    1afe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	ea 50       	subi	r30, 0x0A	; 10
    1b06:	fa 4f       	sbci	r31, 0xFA	; 250
    1b08:	80 83       	st	Z, r24
    1b0a:	bd cf       	rjmp	.-134    	; 0x1a86 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1b0c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1b10:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <twi_rxBufferIndex>
    1b14:	80 32       	cpi	r24, 0x20	; 32
    1b16:	30 f4       	brcc	.+12     	; 0x1b24 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1b18:	e0 91 f5 05 	lds	r30, 0x05F5	; 0x8005f5 <twi_rxBufferIndex>
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	ea 50       	subi	r30, 0x0A	; 10
    1b20:	fa 4f       	sbci	r31, 0xFA	; 250
    1b22:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1b24:	60 91 f5 05 	lds	r22, 0x05F5	; 0x8005f5 <twi_rxBufferIndex>
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	e0 91 5a 06 	lds	r30, 0x065A	; 0x80065a <twi_onSlaveReceive>
    1b2e:	f0 91 5b 06 	lds	r31, 0x065B	; 0x80065b <twi_onSlaveReceive+0x1>
    1b32:	86 ef       	ldi	r24, 0xF6	; 246
    1b34:	95 e0       	ldi	r25, 0x05	; 5
    1b36:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1b38:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <twi_rxBufferIndex>
      break;
    1b3c:	36 c0       	rjmp	.+108    	; 0x1baa <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1b3e:	84 e0       	ldi	r24, 0x04	; 4
    1b40:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1b44:	10 92 17 06 	sts	0x0617, r1	; 0x800617 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1b48:	10 92 16 06 	sts	0x0616, r1	; 0x800616 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1b4c:	e0 91 5c 06 	lds	r30, 0x065C	; 0x80065c <twi_onSlaveTransmit>
    1b50:	f0 91 5d 06 	lds	r31, 0x065D	; 0x80065d <twi_onSlaveTransmit+0x1>
    1b54:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1b56:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <twi_txBufferLength>
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	05 c0       	rjmp	.+10     	; 0x1b68 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1b64:	10 92 18 06 	sts	0x0618, r1	; 0x800618 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1b68:	e0 91 17 06 	lds	r30, 0x0617	; 0x800617 <twi_txBufferIndex>
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	8e 0f       	add	r24, r30
    1b70:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <twi_txBufferIndex>
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	e8 5e       	subi	r30, 0xE8	; 232
    1b78:	f9 4f       	sbci	r31, 0xF9	; 249
    1b7a:	80 81       	ld	r24, Z
    1b7c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1b80:	90 91 17 06 	lds	r25, 0x0617	; 0x800617 <twi_txBufferIndex>
    1b84:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <twi_txBufferLength>
    1b88:	98 17       	cp	r25, r24
    1b8a:	08 f4       	brcc	.+2      	; 0x1b8e <__vector_24+0x21c>
    1b8c:	7c cf       	rjmp	.-264    	; 0x1a86 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1b8e:	85 e8       	ldi	r24, 0x85	; 133
    1b90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1b94:	0a c0       	rjmp	.+20     	; 0x1baa <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1b96:	85 ec       	ldi	r24, 0xC5	; 197
    1b98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1b9c:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <twi_state>
      break;
    1ba0:	04 c0       	rjmp	.+8      	; 0x1baa <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1ba2:	10 92 f4 05 	sts	0x05F4, r1	; 0x8005f4 <twi_error>
      twi_stop();
    1ba6:	0e 94 81 0c 	call	0x1902	; 0x1902 <twi_stop>
      break;
  }
}
    1baa:	ff 91       	pop	r31
    1bac:	ef 91       	pop	r30
    1bae:	bf 91       	pop	r27
    1bb0:	af 91       	pop	r26
    1bb2:	9f 91       	pop	r25
    1bb4:	8f 91       	pop	r24
    1bb6:	7f 91       	pop	r23
    1bb8:	6f 91       	pop	r22
    1bba:	5f 91       	pop	r21
    1bbc:	4f 91       	pop	r20
    1bbe:	3f 91       	pop	r19
    1bc0:	2f 91       	pop	r18
    1bc2:	0f 90       	pop	r0
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	0f 90       	pop	r0
    1bc8:	1f 90       	pop	r1
    1bca:	18 95       	reti

00001bcc <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	81 f0       	breq	.+32     	; 0x1bf0 <turnOffPWM+0x24>
    1bd0:	28 f4       	brcc	.+10     	; 0x1bdc <turnOffPWM+0x10>
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	99 f0       	breq	.+38     	; 0x1bfc <turnOffPWM+0x30>
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	a1 f0       	breq	.+40     	; 0x1c02 <turnOffPWM+0x36>
    1bda:	08 95       	ret
    1bdc:	87 30       	cpi	r24, 0x07	; 7
    1bde:	a9 f0       	breq	.+42     	; 0x1c0a <turnOffPWM+0x3e>
    1be0:	88 30       	cpi	r24, 0x08	; 8
    1be2:	b9 f0       	breq	.+46     	; 0x1c12 <turnOffPWM+0x46>
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	d1 f4       	brne	.+52     	; 0x1c1c <turnOffPWM+0x50>
    1be8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1bec:	8f 7d       	andi	r24, 0xDF	; 223
    1bee:	03 c0       	rjmp	.+6      	; 0x1bf6 <turnOffPWM+0x2a>
    1bf0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1bf4:	8f 77       	andi	r24, 0x7F	; 127
    1bf6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1bfa:	08 95       	ret
    1bfc:	84 b5       	in	r24, 0x24	; 36
    1bfe:	8f 77       	andi	r24, 0x7F	; 127
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <turnOffPWM+0x3a>
    1c02:	84 b5       	in	r24, 0x24	; 36
    1c04:	8f 7d       	andi	r24, 0xDF	; 223
    1c06:	84 bd       	out	0x24, r24	; 36
    1c08:	08 95       	ret
    1c0a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1c0e:	8f 77       	andi	r24, 0x7F	; 127
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <turnOffPWM+0x4c>
    1c12:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1c16:	8f 7d       	andi	r24, 0xDF	; 223
    1c18:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1c1c:	08 95       	ret

00001c1e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	f9 01       	movw	r30, r18
    1c2a:	e8 59       	subi	r30, 0x98	; 152
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1c30:	f9 01       	movw	r30, r18
    1c32:	e4 58       	subi	r30, 0x84	; 132
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1c38:	f9 01       	movw	r30, r18
    1c3a:	e0 57       	subi	r30, 0x70	; 112
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1c40:	cc 23       	and	r28, r28
    1c42:	c1 f0       	breq	.+48     	; 0x1c74 <digitalWrite+0x56>
    1c44:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1c46:	81 11       	cpse	r24, r1
    1c48:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <turnOffPWM>

	out = portOutputRegister(port);
    1c4c:	ec 2f       	mov	r30, r28
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	ee 0f       	add	r30, r30
    1c52:	ff 1f       	adc	r31, r31
    1c54:	ec 55       	subi	r30, 0x5C	; 92
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	a5 91       	lpm	r26, Z+
    1c5a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1c5c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1c5e:	f8 94       	cli

	if (val == LOW) {
    1c60:	11 11       	cpse	r17, r1
    1c62:	04 c0       	rjmp	.+8      	; 0x1c6c <digitalWrite+0x4e>
		*out &= ~bit;
    1c64:	8c 91       	ld	r24, X
    1c66:	d0 95       	com	r29
    1c68:	d8 23       	and	r29, r24
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1c6c:	ec 91       	ld	r30, X
    1c6e:	de 2b       	or	r29, r30
    1c70:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1c72:	9f bf       	out	0x3f, r25	; 63
}
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	08 95       	ret

00001c7c <__udivmodsi4>:
    1c7c:	a1 e2       	ldi	r26, 0x21	; 33
    1c7e:	1a 2e       	mov	r1, r26
    1c80:	aa 1b       	sub	r26, r26
    1c82:	bb 1b       	sub	r27, r27
    1c84:	fd 01       	movw	r30, r26
    1c86:	0d c0       	rjmp	.+26     	; 0x1ca2 <__udivmodsi4_ep>

00001c88 <__udivmodsi4_loop>:
    1c88:	aa 1f       	adc	r26, r26
    1c8a:	bb 1f       	adc	r27, r27
    1c8c:	ee 1f       	adc	r30, r30
    1c8e:	ff 1f       	adc	r31, r31
    1c90:	a2 17       	cp	r26, r18
    1c92:	b3 07       	cpc	r27, r19
    1c94:	e4 07       	cpc	r30, r20
    1c96:	f5 07       	cpc	r31, r21
    1c98:	20 f0       	brcs	.+8      	; 0x1ca2 <__udivmodsi4_ep>
    1c9a:	a2 1b       	sub	r26, r18
    1c9c:	b3 0b       	sbc	r27, r19
    1c9e:	e4 0b       	sbc	r30, r20
    1ca0:	f5 0b       	sbc	r31, r21

00001ca2 <__udivmodsi4_ep>:
    1ca2:	66 1f       	adc	r22, r22
    1ca4:	77 1f       	adc	r23, r23
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	1a 94       	dec	r1
    1cac:	69 f7       	brne	.-38     	; 0x1c88 <__udivmodsi4_loop>
    1cae:	60 95       	com	r22
    1cb0:	70 95       	com	r23
    1cb2:	80 95       	com	r24
    1cb4:	90 95       	com	r25
    1cb6:	9b 01       	movw	r18, r22
    1cb8:	ac 01       	movw	r20, r24
    1cba:	bd 01       	movw	r22, r26
    1cbc:	cf 01       	movw	r24, r30
    1cbe:	08 95       	ret

00001cc0 <__tablejump2__>:
    1cc0:	ee 0f       	add	r30, r30
    1cc2:	ff 1f       	adc	r31, r31
    1cc4:	05 90       	lpm	r0, Z+
    1cc6:	f4 91       	lpm	r31, Z
    1cc8:	e0 2d       	mov	r30, r0
    1cca:	09 94       	ijmp

00001ccc <_exit>:
    1ccc:	f8 94       	cli

00001cce <__stop_program>:
    1cce:	ff cf       	rjmp	.-2      	; 0x1cce <__stop_program>
